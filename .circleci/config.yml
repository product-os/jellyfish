# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details

aliases:
  workflow_filter: &workflow_filter
      filters:
          branches:
            ignore:
              - /(.*)-build-[a-f0-9]{40}$/
              - master

  job_defaults: &job_defaults
      docker:
        - image: resinci/jellyfish-test

      working_directory: ~/repo
      environment:
        DATABASE: postgres
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres

version: 2
dependencies:
  pre:
jobs:
  build:
    <<: *job_defaults

    steps:
        - checkout

        # Restore cached dependencies
        - restore_cache:
            keys:
            - v2-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-

        # --unsafe-perm flag allows the postinstall script to run correctly
        - run:
            name: Install Dependencies
            command: npm ci --unsafe-perm && make build-ui COVERAGE=1 NODE_ENV=test

        - save_cache:
            paths:
              - /root/.npm
            key: v2-dependencies-{{ checksum "package.json" }}

        - run:
            name: Lint
            command: make lint
        - run:
            name: Generate Docs
            command: make docs/assets/architecture.png ARCHITECTURE.md
        - run:
            name: No Unstaged Files
            command: ./scripts/ci/unstaged.sh

        - persist_to_workspace:
            root: .
            paths:
                - dist
                - node_modules

  unit_tests: &unit_tests
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Unit Tests
          command: make test-unit COVERAGE=1

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  integration_tests: &integration_tests
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Integration Tests
          command: make test-integration COVERAGE=1
      - run:
          name: Integration Tests (with debug logs)
          command: make test-integration COVERAGE=1 LOGLEVEL=debug

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_github_translate:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: make test FILES=./test/e2e/sync/github-translate.spec.js COVERAGE=1 INTEGRATION_GITHUB_TOKEN=$GITHUB_TOKEN INTEGRATION_GITHUB_SIGNATURE_KEY=$GITHUB_SIGNATURE_KEY
      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/e2e/sync/github-translate.spec.js COVERAGE=1 INTEGRATION_GITHUB_TOKEN=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_github_mirror:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: make test FILES=./test/e2e/sync/github-mirror.spec.js COVERAGE=1 INTEGRATION_GITHUB_TOKEN=$GITHUB_TOKEN INTEGRATION_GITHUB_SIGNATURE_KEY=$GITHUB_SIGNATURE_KEY
      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/e2e/sync/github-mirror.spec.js COVERAGE=1 INTEGRATION_GITHUB_TOKEN=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_front_translate:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: make test FILES=./test/e2e/sync/front-translate.spec.js COVERAGE=1 INTEGRATION_FRONT_TOKEN=$FRONT_TOKEN INTEGRATION_INTERCOM_TOKEN=$INTERCOM_TOKEN
      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/e2e/sync/front-translate.spec.js COVERAGE=1 INTEGRATION_FRONT_TOKEN=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_front_mirror:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: make test FILES=./test/e2e/sync/front-mirror.spec.js COVERAGE=1 INTEGRATION_FRONT_TOKEN=$FRONT_TOKEN INTEGRATION_INTERCOM_TOKEN=$INTERCOM_TOKEN
      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/e2e/sync/front-mirror.spec.js COVERAGE=1 INTEGRATION_FRONT_TOKEN=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_outreach_translate:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: make test FILES=./test/e2e/sync/outreach-translate.spec.js COVERAGE=1 INTEGRATION_OUTREACH_APP_ID=$OUTREACH_APP_ID INTEGRATION_OUTREACH_APP_SECRET=$OUTREACH_APP_SECRET INTEGRATION_OUTREACH_SIGNATURE_KEY=$OUTREACH_SIGNATURE_KEY

      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/e2e/sync/outreach-translate.spec.js COVERAGE=1 INTEGRATION_OUTREACH_APP_ID= INTEGRATION_OUTREACH_APP_SECRET= INTEGRATION_OUTREACH_SIGNATURE_KEY=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_outreach_mirror:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: make test FILES=./test/e2e/sync/outreach-mirror.spec.js COVERAGE=1 INTEGRATION_OUTREACH_APP_ID=$OUTREACH_APP_ID INTEGRATION_OUTREACH_APP_SECRET=$OUTREACH_APP_SECRET INTEGRATION_OUTREACH_SIGNATURE_KEY=$OUTREACH_SIGNATURE_KEY

      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/e2e/sync/outreach-mirror.spec.js COVERAGE=1 INTEGRATION_OUTREACH_APP_ID= INTEGRATION_OUTREACH_APP_SECRET= INTEGRATION_OUTREACH_SIGNATURE_KEY=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_discourse_translate:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: make test FILES=./test/e2e/sync/discourse-translate.spec.js COVERAGE=1 INTEGRATION_DISCOURSE_TOKEN=$DISCOURSE_TOKEN INTEGRATION_DISCOURSE_SIGNATURE_KEY=$DISCOURSE_SIGNATURE_KEY INTEGRATION_DISCOURSE_USERNAME=$DISCOURSE_USERNAME
      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/e2e/sync/discourse-translate.spec.js COVERAGE=1 INTEGRATION_DISCOURSE_TOKEN=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_discourse_mirror:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: make test FILES=./test/e2e/sync/discourse-mirror.spec.js COVERAGE=1 INTEGRATION_DISCOURSE_TOKEN=$DISCOURSE_TOKEN INTEGRATION_DISCOURSE_SIGNATURE_KEY=$DISCOURSE_SIGNATURE_KEY INTEGRATION_DISCOURSE_USERNAME=$DISCOURSE_USERNAME
      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/e2e/sync/discourse-mirror.spec.js COVERAGE=1 INTEGRATION_DISCOURSE_TOKEN=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_balena_api_translate:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: make test FILES=./test/e2e/sync/balena-api-translate.spec.js COVERAGE=1 INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION=$BALENA_API_PUBLIC_KEY_PRODUCTION INTEGRATION_BALENA_API_PUBLIC_KEY_STAGING=$BALENA_API_PUBLIC_KEY_STAGING INTEGRATION_BALENA_API_PRIVATE_KEY=$BALENA_API_PRIVATE_KEY
      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/e2e/sync/balena-api-translate.spec.js COVERAGE=1 INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION= INTEGRATION_BALENA_API_PUBLIC_KEY_STAGING= INTEGRATION_BALENA_API_PRIVATE_KEY=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  e2e_tests: &e2e_tests
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: End To End Tests (Docker Compose)
          command: make compose-up DETACH=1 && make compose-exec-sidecar COMMAND="make" ARGS='test COVERAGE=0 FILES=./test/e2e/sdk/*.spec.js SCRUB=0' && make compose-exec-sidecar COMMAND="make" ARGS="test-e2e-ui COVERAGE=0 SCRUB=0" && make compose-down

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      # Setup artifact store for UI integration test screenshots
      - run: mkdir -p /tmp/test-results/screenshots

      - run:
          name: End To End Tests
          command: make test-e2e-server COVERAGE=1 INTEGRATION_GITHUB_TOKEN=$GITHUB_TOKEN INTEGRATION_GITHUB_SIGNATURE_KEY=$GITHUB_SIGNATURE_KEY INTEGRATION_OUTREACH_APP_ID=$OUTREACH_APP_ID INTEGRATION_OUTREACH_APP_SECRET=$OUTREACH_APP_SECRET INTEGRATION_OUTREACH_SIGNATURE_KEY=$OUTREACH_SIGNATURE_KEY INTEGRATION_FLOWDOCK_SIGNATURE_KEY=$FLOWDOCK_SIGNATURE_KEY

      - run:
          name: Postgres Dump
          command: ./scripts/postgres-dump.sh dump.gz

      # Store artifacts for debugging purposes
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json
            - dump.gz

  results:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Postgres Dump
          command: mkdir -p /tmp/test-results && cp dump.gz /tmp/test-results

      - run:
          name: Webpack Bundle Report For UI
          command: make build-ui COVERAGE=0 NODE_ENV=test && mkdir -p /tmp/test-results/ui && cp dist/ui/webpack-bundle-report.html /tmp/test-results/ui/webpack-bundle-report.html
      - run:
          name: Webpack Bundle Report For Chat Widget
          command: make build-chat-widget COVERAGE=0 NODE_ENV=test && mkdir -p /tmp/test-results/chat-widget && cp dist/chat-widget/webpack-bundle-report.html /tmp/test-results/chat-widget/webpack-bundle-report.html
      - run:
          name: Generate Coverage Results
          command: mkdir -p /tmp/test-results && tar czf /tmp/test-results/nyc_output.tar.gz .nyc_output && make coverage && cp -rf coverage /tmp/test-results
      - run:
          name: Git Stats
          command: gitstats . /tmp/test-results/gitstats

      # Store artifacts for debugging purposes
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - run:
          name: Generate Summary
          command: ./scripts/ci/summary.sh > SUMMARY

      - run:
          name: Post PR Summary
          command: GITHUB_TOKEN=$GITHUB_TOKEN node scripts/ci/github-pr-summary.js $CIRCLE_PULL_REQUEST ./SUMMARY

  eslint_jellyfish:
    <<: *job_defaults
    steps:
      - checkout
      - run:
          name: Test
          command: cd ./scripts/eslint-plugin-jellyfish && npm install && npm test

workflows:
    version: 2
    build:
        jobs:
            - build:
                <<: *workflow_filter

            - unit_tests:
                requires:
                    - build
                <<: *workflow_filter

            - integration_tests:
                requires:
                    - build
                <<: *workflow_filter

            - e2e_tests:
                requires:
                    - build
                <<: *workflow_filter

            - sync_tests_front_translate:
                requires:
                    - build
                <<: *workflow_filter

            - sync_tests_outreach_translate:
                requires:
                    - build
                <<: *workflow_filter

            - sync_tests_discourse_translate:
                requires:
                    - build
                <<: *workflow_filter

            - sync_tests_balena_api_translate:
                requires:
                    - build
                <<: *workflow_filter

            - sync_tests_github_translate:
                requires:
                    - build
                <<: *workflow_filter

            - sync_tests_front_mirror:
                requires:
                    - build
                <<: *workflow_filter

            - sync_tests_outreach_mirror:
                requires:
                    - build
                <<: *workflow_filter

            - sync_tests_discourse_mirror:
                requires:
                    - build
                <<: *workflow_filter

            - sync_tests_github_mirror:
                requires:
                    - build
                <<: *workflow_filter

            - results:
                requires:
                  - unit_tests
                  - integration_tests
                  - e2e_tests
                  - sync_tests_front_translate
                  - sync_tests_outreach_translate
                  - sync_tests_discourse_translate
                  - sync_tests_balena_api_translate
                  - sync_tests_github_translate
                  - sync_tests_front_mirror
                  - sync_tests_outreach_mirror
                  - sync_tests_discourse_mirror
                  - sync_tests_github_mirror
                <<: *workflow_filter

            - eslint_jellyfish:
                <<: *workflow_filter
