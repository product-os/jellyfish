# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details

aliases:
  workflow_filter: &workflow_filter
      filters:
          branches:
            ignore:
              - /(.*)-build-[a-f0-9]{40}$/
              - master

  job_defaults: &job_defaults
      docker:
        - image: resinci/jellyfish-test

      working_directory: ~/repo

  postgres_job_defaults: &postgres_job_defaults
    <<: *job_defaults

    environment:
      DATABASE: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

version: 2
dependencies:
  pre:
jobs:
  build:
    <<: *job_defaults

    steps:
        - checkout

        # Restore cached dependencies
        - restore_cache:
            keys:
            - v2-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-

        # --unsafe-perm flag allows the postinstall script to run correctly
        - run:
            name: Install Dependencies
            command: npm ci --unsafe-perm && make build-ui

        - save_cache:
            paths:
              - /root/.npm
            key: v2-dependencies-{{ checksum "package.json" }}

        - run:
            name: Generate Docs
            command: make dist/docs.html
        - run:
            name: Lint
            command: make lint

        - persist_to_workspace:
            root: .
            paths:
                - dist
                - node_modules

  unit_tests: &unit_tests
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Unit Tests
          command: make test-unit COVERAGE=1

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  postgres_integration_tests: &postgres_integration_tests
    <<: *postgres_job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Integration Tests (with Redis)
          command: make test-integration COVERAGE=1
      - run:
          name: Integration Tests (without Redis)
          command: make test-integration COVERAGE=1 DISABLE_REDIS=1
      - run:
          name: Integration Tests (with debug logs)
          command: make test-integration COVERAGE=1 LOGLEVEL=debug

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  postgres_sync_tests_github:
    <<: *postgres_job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: make test FILES=./test/e2e/sync/github-*.spec.js COVERAGE=1
      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/e2e/sync/github-*.spec.js COVERAGE=1 INTEGRATION_GITHUB_TOKEN=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  postgres_sync_tests_front:
    <<: *postgres_job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: make test FILES=./test/e2e/sync/front-*.spec.js COVERAGE=1
      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/e2e/sync/front-*.spec.js COVERAGE=1 INTEGRATION_FRONT_TOKEN=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  postgres_sync_tests_discourse:
    <<: *postgres_job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: make test FILES=./test/e2e/sync/discourse-*.spec.js COVERAGE=1
      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/e2e/sync/discourse-*.spec.js COVERAGE=1 INTEGRATION_DISCOURSE_TOKEN=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  postgres_e2e_tests: &postgres_e2e_tests
    <<: *postgres_job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      # Setup artifact store for UI integration test screenshots
      - run: mkdir -p /tmp/test-results/screenshots

      - run:
          name: End To End Tests
          command: make test-e2e-sdk test-e2e-server test-e2e-ui COVERAGE=1

      - run:
          name: End To End Tests (without Redis)
          command: make test-e2e-sdk test-e2e-server test-e2e-ui COVERAGE=1 DISABLE_REDIS=1

      # Store artifacts for debugging purposes
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  postgres_stress_tests:
    <<: *postgres_job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      # Stress Testing
      - run:
          name: Serial Core Inserts
          command: make node FILE=stress/core/insert-serial.js
      - run:
          name: Parallel Core Inserts
          command: make node FILE=stress/core/insert-parallel.js
      # There is no Postgres on the previous commit yet
      # - run:
          # name: Previous Commit
          # command: git checkout HEAD~1 && npm ci
      # - run:
          # name: Serial Core Inserts (previous)
          # command: node stress/core/insert-serial.js
      # - run:
          # name: Parallel Core Inserts (previous)
          # command: node stress/core/insert-parallel.js

  # UI tests seem to contain most of the flaky tests
  # Lets really make sure they are stable
  postgres_flaky_ui_tests:
    <<: *postgres_job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      # Setup artifact store for UI integration test screenshots
      - run: mkdir -p /tmp/test-results/screenshots

      - run:
          name: Flaky UI Tests (production bundle)
          command: make build-ui NODE_ENV=production && ./scripts/ci/flaky-ui-tests.sh
      - run:
          name: Flaky UI Tests (debug bundle)
          command: make build-ui NODE_ENV=test && ./scripts/ci/flaky-ui-tests.sh

      # Store artifacts for debugging purposes
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  results:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Webpack Bundle Report
          command: make build-ui NODE_ENV=test && mkdir -p /tmp/test-results && cp webpack-bundle-report.html /tmp/test-results/webpack-bundle-report.html
      - run:
          name: Generate Coverage Results
          command: make coverage && mkdir -p /tmp/test-results && cp -rf coverage /tmp/test-results
      - run:
          name: Git Stats
          command: gitstats . /tmp/test-results/gitstats

      # Store artifacts for debugging purposes
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - run:
          name: Generate Summary
          command: ./scripts/ci/summary.sh > SUMMARY

      - run:
          name: Post PR Summary
          command: GITHUB_TOKEN=$INTEGRATION_GITHUB_TOKEN node scripts/ci/github-pr-summary.js $CIRCLE_PULL_REQUEST ./SUMMARY

  eslint_jellyfish:
    <<: *job_defaults
    steps:
      - checkout
      - run:
          name: Test
          command: cd ./scripts/eslint-plugin-jellyfish && npm install && npm test

workflows:
    version: 2
    build:
        jobs:
            - build:
                <<: *workflow_filter

            - unit_tests:
                requires:
                    - build
                <<: *workflow_filter

            - postgres_integration_tests:
                requires:
                    - build
                <<: *workflow_filter

            - postgres_e2e_tests:
                requires:
                    - build
                <<: *workflow_filter

            - postgres_flaky_ui_tests:
                requires:
                    - build
                <<: *workflow_filter

            - postgres_stress_tests:
                requires:
                    - build
                <<: *workflow_filter

            - postgres_sync_tests_front:
                requires:
                    - build
                <<: *workflow_filter

            - postgres_sync_tests_discourse:
                requires:
                    - build
                <<: *workflow_filter

            - postgres_sync_tests_github:
                requires:
                    - build
                <<: *workflow_filter

            - results:
                requires:
                  - unit_tests

                  - postgres_integration_tests
                  - postgres_e2e_tests
                  - postgres_flaky_ui_tests
                  - postgres_sync_tests_front
                  - postgres_sync_tests_discourse
                  - postgres_sync_tests_github
                <<: *workflow_filter

            - eslint_jellyfish:
                <<: *workflow_filter
