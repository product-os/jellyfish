# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details

aliases:
  workflow_filter: &workflow_filter
      filters:
          branches:
            ignore:
              - /(.*)-build-[a-f0-9]{40}$/
              - master

  job_defaults: &job_defaults
      docker:
        - image: resinci/jellyfish-test

      # Match the Dockerfile WORKDIR so we can
      # transparently merge code coverage reports.
      working_directory: /usr/src/jellyfish

      environment: &job_defaults_environment
        DATABASE: postgres
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres

version: 2
dependencies:
  pre:
jobs:
  build:
    <<: *job_defaults

    steps:
      - checkout

      # Restore cached dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-

      # --unsafe-perm flag allows the postinstall script to run correctly
      - run:
          name: Install Dependencies
          command: PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true npm ci --unsafe-perm

      - run:
          name: Build UI and livechat
          command: make build-ui COVERAGE=1 NODE_ENV=test && COVERAGE=1 NODE_ENV=test make build-livechat

      - save_cache:
          paths:
            - /root/.npm
          key: v2-dependencies-{{ checksum "package.json" }}

      - run:
          name: Lint
          command: make lint
      - run:
          name: Generate Files
          command: make docs/assets/architecture.png ARCHITECTURE.md docker-compose.yml
      - run:
          name: No Unstaged Files
          command: ./scripts/ci/unstaged.sh

      - persist_to_workspace:
          root: .
          paths:
              - dist
              - node_modules

  compose-build:
    <<: *job_defaults

    resource_class: xlarge

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Install scripts-template dependencies
          command: cd scripts/template; npm install
      - run:
          name: Compose Build
          command: make compose-build COVERAGE=1
      - run:
          name: Save Docker image layers
          command: docker save -o /images.tar `docker images --format '{{.Repository}}' | grep -E 'jellyfish_'`
      - save_cache:
          key: jellyfish-docker-layers-{{ .Branch }}-{{ epoch }}
          paths:
            - /images.tar

  unit_and_sync_tests: &unit_and_sync_tests
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Unit Tests
          command: make test-unit COVERAGE=1

      - run:
          name: Sync Tests Outreach Translate
          command: ./scripts/ci/skip_tests_if_only.sh ui ui-components chat-widget livechat || make test FILES=./test/integration/sync/outreach-translate.spec.js COVERAGE=1 INTEGRATION_OUTREACH_APP_ID=$OUTREACH_APP_ID INTEGRATION_OUTREACH_APP_SECRET=$OUTREACH_APP_SECRET INTEGRATION_OUTREACH_SIGNATURE_KEY=$OUTREACH_SIGNATURE_KEY
      - run:
          name: Sync Tests Outreach Translate Without Tokens
          command: make test FILES=./test/integration/sync/outreach-translate.spec.js COVERAGE=1 INTEGRATION_OUTREACH_APP_ID= INTEGRATION_OUTREACH_APP_SECRET= INTEGRATION_OUTREACH_SIGNATURE_KEY=

      - run:
          name: Sync Tests Balena API Translate
          command: ./scripts/ci/skip_tests_if_only.sh ui ui-components chat-widget livechat || make test FILES=./test/integration/sync/balena-api-translate.spec.js COVERAGE=1 INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION=$BALENA_API_PUBLIC_KEY_PRODUCTION INTEGRATION_BALENA_API_PUBLIC_KEY_STAGING=$BALENA_API_PUBLIC_KEY_STAGING INTEGRATION_BALENA_API_PRIVATE_KEY=$BALENA_API_PRIVATE_KEY
      - run:
          name: Sync Tests Balena API Translate Without Tokens
          command: make test FILES=./test/integration/sync/balena-api-translate.spec.js COVERAGE=1 INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION= INTEGRATION_BALENA_API_PUBLIC_KEY_STAGING= INTEGRATION_BALENA_API_PRIVATE_KEY=

      - run:
          name: Sync Tests Github Translate
          command: ./scripts/ci/skip_tests_if_only.sh ui ui-components chat-widget livechat || make test FILES=./test/integration/sync/github-translate.spec.js COVERAGE=1 INTEGRATION_GITHUB_TOKEN=$GITHUB_TOKEN INTEGRATION_GITHUB_SIGNATURE_KEY=$GITHUB_SIGNATURE_KEY
      - run:
          name: Sync Tests Github Translate Without Tokens
          command: make test FILES=./test/integration/sync/github-translate.spec.js COVERAGE=1 INTEGRATION_GITHUB_TOKEN=

      - run:
          name: Sync Tests Flowdock Translate
          command: ./scripts/ci/skip_tests_if_only.sh ui ui-components chat-widget livechat || make test FILES=./test/integration/sync/flowdock-translate.spec.js COVERAGE=1 INTEGRATION_FLOWDOCK_SIGNATURE_KEY=$FLOWDOCK_SIGNATURE_KEY INTEGRATION_FLOWDOCK_TOKEN=$FLOWDOCK_TOKEN
      - run:
          name: Sync Tests Flowdock Translate Without Tokens
          command: make test FILES=./test/integration/sync/flowdock-translate.spec.js COVERAGE=1 INTEGRATION_FLOWDOCK_SIGNATURE_KEY= INTEGRATION_FLOWDOCK_TOKEN=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  integration_tests: &integration_tests
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Integration Tests
          command: make test-integration-core test-integration-queue test-integration-sync test-integration-worker COVERAGE=1 && make test-integration-server COVERAGE=1 INTEGRATION_OUTREACH_APP_ID=$OUTREACH_APP_ID INTEGRATION_OUTREACH_APP_SECRET=$OUTREACH_APP_SECRET INTEGRATION_OUTREACH_SIGNATURE_KEY=$OUTREACH_SIGNATURE_KEY OAUTH_REDIRECT_BASE_URL=https://jel.ly.fish

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_github_mirror:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - setup_remote_docker

      - restore_cache:
          key: jellyfish-docker-layers-{{ .Branch }}
      - run:
          name: Load Docker image layers
          command: docker load -i /images.tar

      - run:
          name: Install scripts-template dependencies
          command: cd scripts/template; npm install
      - run:
          name: Compose Up
          command: make compose-up DETACH=1 INTEGRATION_GITHUB_TOKEN=$GITHUB_TOKEN INTEGRATION_GITHUB_SIGNATURE_KEY=$GITHUB_SIGNATURE_KEY COVERAGE=1
      - run:
          name: Sync Tests
          command: make compose-exec-sidecar COMMAND="make" ARGS="test COVERAGE=0 FILES=./test/e2e/sync/github-mirror.spec.js SCRUB=0 COVERAGE=0 INTEGRATION_GITHUB_TOKEN=$GITHUB_TOKEN INTEGRATION_GITHUB_SIGNATURE_KEY=$GITHUB_SIGNATURE_KEY"
      - run:
          name: Compose Down
          command: make compose-stop
      - run:
          name: Compose Up Without Tokens
          command: make compose-up DETACH=1 COVERAGE=1
      - run:
          name: Sync End To End Tests Without Tokens
          command: make compose-exec-sidecar COMMAND="make" ARGS="test COVERAGE=0 FILES=./test/e2e/sync/github-mirror.spec.js SCRUB=0 COVERAGE=0 INTEGRATION_GITHUB_TOKEN="
      - run:
          name: Compose Down
          command: make compose-stop
      - run:
          name: Copy Code Coverage Reports
          command: make compose-up-worker_1 DETACH=1 && docker cp jellyfish_worker_1_1:/usr/src/jellyfish/.nyc_output .nyc_output && make compose-stop

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_front_translate:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: |
            if ./scripts/ci/skip_tests_if_only.sh ui ui-components chat-widget livechat; then
              mkdir -p .nyc_output
              # Mock coverage output so that "persist_to_workspace" succeeds
              touch .nyc_output/none-front-translate.json
              exit 0
            fi

            make test FILES=./test/integration/sync/front-translate.spec.js COVERAGE=1 INTEGRATION_FRONT_TOKEN=$FRONT_TOKEN INTEGRATION_INTERCOM_TOKEN=$INTERCOM_TOKEN
      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/integration/sync/front-translate.spec.js COVERAGE=1 INTEGRATION_FRONT_TOKEN=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_front_mirror:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - setup_remote_docker

      - restore_cache:
          key: jellyfish-docker-layers-{{ .Branch }}
      - run:
          name: Load Docker image layers
          command: docker load -i /images.tar

      - run:
          name: Install scripts-template dependencies
          command: cd scripts/template; npm install
      - run:
          name: Compose Up
          command: make compose-up DETACH=1 INTEGRATION_FRONT_TOKEN=$FRONT_TOKEN INTEGRATION_INTERCOM_TOKEN=$INTERCOM_TOKEN COVERAGE=1
      - run:
          name: Sync Tests
          command: make compose-exec-sidecar COMMAND="make" ARGS="test COVERAGE=0 FILES=./test/e2e/sync/front-mirror.spec.js SCRUB=0 COVERAGE=0 INTEGRATION_FRONT_TOKEN=$FRONT_TOKEN INTEGRATION_INTERCOM_TOKEN=$INTERCOM_TOKEN"
      - run:
          name: Compose Down
          command: make compose-stop
      - run:
          name: Compose Up Without Tokens
          command: make compose-up DETACH=1 COVERAGE=1
      - run:
          name: Sync End To End Tests Without Tokens
          command: make compose-exec-sidecar COMMAND="make" ARGS="test COVERAGE=0 FILES=./test/e2e/sync/front-mirror.spec.js SCRUB=0 COVERAGE=0 INTEGRATION_FRONT_TOKEN="
      - run:
          name: Compose Down
          command: make compose-stop
      - run:
          name: Copy Code Coverage Reports
          command: make compose-up-worker_1 DETACH=1 && docker cp jellyfish_worker_1_1:/usr/src/jellyfish/.nyc_output .nyc_output && make compose-stop

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_discourse_translate:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Start PostgreSQL
          command: service postgresql start && su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'postgres';\""
      - run:
          name: Start Redis
          command: service redis-server start

      - run:
          name: Sync Tests
          command: |
            if ./scripts/ci/skip_tests_if_only.sh ui ui-components chat-widget livechat; then
              mkdir -p .nyc_output
              # Mock coverage output so that "persist_to_workspace" succeeds
              touch .nyc_output/none-discourse-translate.json
              exit 0
            fi

            make test FILES=./test/integration/sync/discourse-translate.spec.js COVERAGE=1 INTEGRATION_DISCOURSE_TOKEN=$DISCOURSE_TOKEN INTEGRATION_DISCOURSE_SIGNATURE_KEY=$DISCOURSE_SIGNATURE_KEY INTEGRATION_DISCOURSE_USERNAME=$DISCOURSE_USERNAME
      - run:
          name: Sync End To End Tests Without Tokens
          command: make test FILES=./test/integration/sync/discourse-translate.spec.js COVERAGE=1 INTEGRATION_DISCOURSE_TOKEN=

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  sync_tests_discourse_mirror:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - setup_remote_docker

      - restore_cache:
          key: jellyfish-docker-layers-{{ .Branch }}
      - run:
          name: Load Docker image layers
          command: docker load -i /images.tar

      - run:
          name: Install scripts-template dependencies
          command: cd scripts/template; npm install
      - run:
          name: Compose Up
          command: make compose-up DETACH=1 INTEGRATION_DISCOURSE_TOKEN=$DISCOURSE_TOKEN INTEGRATION_DISCOURSE_SIGNATURE_KEY=$DISCOURSE_SIGNATURE_KEY INTEGRATION_DISCOURSE_USERNAME=$DISCOURSE_USERNAME COVERAGE=1
      - run:
          name: Sync Tests
          command: make compose-exec-sidecar COMMAND="make" ARGS="test COVERAGE=0 FILES=./test/e2e/sync/discourse-mirror.spec.js SCRUB=0 COVERAGE=0 INTEGRATION_DISCOURSE_TOKEN=$DISCOURSE_TOKEN INTEGRATION_DISCOURSE_SIGNATURE_KEY=$DISCOURSE_SIGNATURE_KEY INTEGRATION_DISCOURSE_USERNAME=$DISCOURSE_USERNAME"
      - run:
          name: Compose Down
          command: make compose-stop
      - run:
          name: Compose Up Without Tokens
          command: make compose-up DETACH=1 COVERAGE=1
      - run:
          name: Sync End To End Tests Without Tokens
          command: make compose-exec-sidecar COMMAND="make" ARGS="test COVERAGE=0 FILES=./test/e2e/sync/discourse-mirror.spec.js SCRUB=0 COVERAGE=0 INTEGRATION_DISCOURSE_TOKEN="
      - run:
          name: Compose Down
          command: make compose-stop
      - run:
          name: Copy Code Coverage Reports
          command: make compose-up-worker_1 DETACH=1 && docker cp jellyfish_worker_1_1:/usr/src/jellyfish/.nyc_output .nyc_output && make compose-stop

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  e2e_tests_server: &e2e_tests_server
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - setup_remote_docker

      - restore_cache:
          key: jellyfish-docker-layers-{{ .Branch }}
      - run:
          name: Load Docker image layers
          command: docker load -i /images.tar

      - run:
          name: Install scripts-template dependencies
          command: cd scripts/template; npm install
      - run:
          name: Docker Compose Up (with integration tokens)
          command: make compose-up DETACH=1 INTEGRATION_GITHUB_TOKEN=$GITHUB_TOKEN INTEGRATION_GITHUB_SIGNATURE_KEY=$GITHUB_SIGNATURE_KEY INTEGRATION_OUTREACH_APP_ID=$OUTREACH_APP_ID INTEGRATION_OUTREACH_APP_SECRET=$OUTREACH_APP_SECRET INTEGRATION_OUTREACH_SIGNATURE_KEY=$OUTREACH_SIGNATURE_KEY INTEGRATION_FLOWDOCK_SIGNATURE_KEY=$FLOWDOCK_SIGNATURE_KEY OAUTH_REDIRECT_BASE_URL=https://jel.ly.fish COVERAGE=1
      - run:
          name: End To End Tests (Server)
          command: make compose-exec-sidecar COMMAND="make" ARGS="test-e2e-server COVERAGE=0 SCRUB=0 INTEGRATION_GITHUB_TOKEN=$GITHUB_TOKEN INTEGRATION_GITHUB_SIGNATURE_KEY=$GITHUB_SIGNATURE_KEY INTEGRATION_OUTREACH_APP_ID=$OUTREACH_APP_ID INTEGRATION_OUTREACH_APP_SECRET=$OUTREACH_APP_SECRET INTEGRATION_OUTREACH_SIGNATURE_KEY=$OUTREACH_SIGNATURE_KEY INTEGRATION_FLOWDOCK_SIGNATURE_KEY=$FLOWDOCK_SIGNATURE_KEY OAUTH_REDIRECT_BASE_URL=https://jel.ly.fish"
      - run:
          name: Postgres Dump
          command: make compose-exec-sidecar COMMAND="./scripts/postgres-dump.sh" ARGS="dump.gz" && docker cp jellyfish_sidecar_1:/usr/src/jellyfish/dump.gz dump-server.gz
      - run:
          name: Docker Compose Down
          command: make compose-stop
      - run:
          name: Copy Code Coverage Reports
          command: make compose-up-worker_1 DETACH=1 && docker cp jellyfish_worker_1_1:/usr/src/jellyfish/.nyc_output .nyc_output && make compose-stop

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json
            - dump-server.gz

  e2e_tests_ui: &e2e_tests_ui
    <<: *job_defaults

    resource_class: xlarge

    steps:
      - checkout

      - attach_workspace:
          at: .

      - setup_remote_docker

      - restore_cache:
          key: jellyfish-docker-layers-{{ .Branch }}
      - run:
          name: Load Docker image layers
          command: docker load -i /images.tar

      - run:
          name: Install scripts-template dependencies
          command: cd scripts/template; npm install
      - run:
          name: Docker Compose Up
          command: make compose-up DETACH=1 COVERAGE=1 FS_DRIVER=s3FS
      - run:
          name: End To End Tests (UI)
          command: make compose-exec-sidecar COMMAND="make" ARGS="test-e2e-ui COVERAGE=0 SCRUB=0"
      - run:
          name: Postgres Dump
          command: make compose-exec-sidecar COMMAND="./scripts/postgres-dump.sh" ARGS="dump.gz" && docker cp jellyfish_sidecar_1:/usr/src/jellyfish/dump.gz dump-ui.gz
      - run:
          name: Docker Compose Down
          command: make compose-stop
      - run:
          name: Copy Code Coverage Reports
          command: make compose-up-worker_1 DETACH=1 && docker cp jellyfish_worker_1_1:/usr/src/jellyfish/.nyc_output .nyc_output && make compose-stop

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json
            - dump-ui.gz

  e2e_tests_livechat: &e2e_tests_livechat
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - setup_remote_docker

      - restore_cache:
          key: jellyfish-docker-layers-{{ .Branch }}
      - run:
          name: Load Docker image layers
          command: docker load -i /images.tar

      - run:
          name: Install scripts-template dependencies
          command: cd scripts/template; npm install
      - run:
          name: Docker Compose Up
          command: make compose-up DETACH=1 COVERAGE=1
      - run:
          name: End To End Tests (Livechat)
          command: make compose-exec-sidecar COMMAND="make" ARGS="test-e2e-livechat COVERAGE=0 SCRUB=0"
      - run:
          name: Postgres Dump
          command: make compose-exec-sidecar COMMAND="./scripts/postgres-dump.sh" ARGS="dump.gz" && docker cp jellyfish_sidecar_1:/usr/src/jellyfish/dump.gz dump-livechat.gz
      - run:
          name: Docker Compose Down
          command: make compose-stop
      - run:
          name: Copy Code Coverage Reports
          command: make compose-up-worker_1 DETACH=1 && docker cp jellyfish_worker_1_1:/usr/src/jellyfish/.nyc_output .nyc_output && make compose-stop

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json
            - dump-livechat.gz

  e2e_tests_server_previous_dump: &e2e_tests_server_previous_dump
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - setup_remote_docker

      - restore_cache:
          key: jellyfish-docker-layers-{{ .Branch }}
      - run:
          name: Load Docker image layers
          command: docker load -i /images.tar

      - run:
          name: Install scripts-template dependencies
          command: cd scripts/template; npm install
      - run:
          name: Docker Compose Up (with integration tokens)
          command: make compose-up DETACH=1 INTEGRATION_GITHUB_TOKEN=$GITHUB_TOKEN INTEGRATION_GITHUB_SIGNATURE_KEY=$GITHUB_SIGNATURE_KEY INTEGRATION_OUTREACH_APP_ID=$OUTREACH_APP_ID INTEGRATION_OUTREACH_APP_SECRET=$OUTREACH_APP_SECRET INTEGRATION_OUTREACH_SIGNATURE_KEY=$OUTREACH_SIGNATURE_KEY INTEGRATION_FLOWDOCK_SIGNATURE_KEY=$FLOWDOCK_SIGNATURE_KEY OAUTH_REDIRECT_BASE_URL=https://jel.ly.fish COVERAGE=1
      - run:
          name: Fetch Old Postgres Dump
          command: ./scripts/ci/postgres-get-previous-dump.sh server && ls -l && gunzip dump.gz
      - run:
          name: Import Postgres Dump
          command: docker cp dump jellyfish_sidecar_1:/usr/src/jellyfish/dump && make compose-exec-sidecar COMMAND="./scripts/ci/postgres-import-snapshot.sh" ARGS="/usr/src/jellyfish/dump"
      - run:
          name: End To End Tests (Server)
          command: make compose-exec-sidecar COMMAND="make" ARGS="test-e2e-server COVERAGE=0 SCRUB=0 INTEGRATION_GITHUB_TOKEN=$GITHUB_TOKEN INTEGRATION_GITHUB_SIGNATURE_KEY=$GITHUB_SIGNATURE_KEY INTEGRATION_OUTREACH_APP_ID=$OUTREACH_APP_ID INTEGRATION_OUTREACH_APP_SECRET=$OUTREACH_APP_SECRET INTEGRATION_OUTREACH_SIGNATURE_KEY=$OUTREACH_SIGNATURE_KEY INTEGRATION_FLOWDOCK_SIGNATURE_KEY=$FLOWDOCK_SIGNATURE_KEY OAUTH_REDIRECT_BASE_URL=https://jel.ly.fish"
      - run:
          name: Docker Compose Down
          command: make compose-stop
      - run:
          name: Copy Code Coverage Reports
          command: make compose-up-worker_1 DETACH=1 && docker cp jellyfish_worker_1_1:/usr/src/jellyfish/.nyc_output .nyc_output && make compose-stop

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  e2e_tests_ui_previous_dump: &e2e_tests_ui_previous_dump
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - setup_remote_docker

      - restore_cache:
          key: jellyfish-docker-layers-{{ .Branch }}
      - run:
          name: Load Docker image layers
          command: docker load -i /images.tar

      - run:
          name: Install scripts-template dependencies
          command: cd scripts/template; npm install
      - run:
          name: Docker Compose Up
          command: make compose-up DETACH=1 COVERAGE=1
      - run:
          name: Fetch Old Postgres Dump
          command: ./scripts/ci/postgres-get-previous-dump.sh ui && ls -l && gunzip dump.gz
      - run:
          name: Import Postgres Dump
          command: docker cp dump jellyfish_sidecar_1:/usr/src/jellyfish/dump && make compose-exec-sidecar COMMAND="./scripts/ci/postgres-import-snapshot.sh" ARGS="/usr/src/jellyfish/dump"
      - run:
          name: End To End Tests (UI)
          command: make compose-exec-sidecar COMMAND="make" ARGS="test-e2e-ui COVERAGE=0 SCRUB=0"
      - run:
          name: Docker Compose Down
          command: make compose-stop
      - run:
          name: Copy Code Coverage Reports
          command: make compose-up-worker_1 DETACH=1 && docker cp jellyfish_worker_1_1:/usr/src/jellyfish/.nyc_output .nyc_output && make compose-stop

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  e2e_tests_livechat_previous_dump: &e2e_tests_livechat_previous_dump
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - setup_remote_docker

      - restore_cache:
          key: jellyfish-docker-layers-{{ .Branch }}
      - run:
          name: Load Docker image layers
          command: docker load -i /images.tar

      - run:
          name: Install scripts-template dependencies
          command: cd scripts/template; npm install
      - run:
          name: Docker Compose Up
          command: make compose-up DETACH=1 COVERAGE=1
      - run:
          name: Fetch Old Postgres Dump
          command: ./scripts/ci/postgres-get-previous-dump.sh livechat && ls -l && gunzip dump.gz
      - run:
          name: Import Postgres Dump
          command: docker cp dump jellyfish_sidecar_1:/usr/src/jellyfish/dump && make compose-exec-sidecar COMMAND="./scripts/ci/postgres-import-snapshot.sh" ARGS="/usr/src/jellyfish/dump"
      - run:
          name: End To End Tests (Livechat)
          command: make compose-exec-sidecar COMMAND="make" ARGS="test-e2e-livechat COVERAGE=0 SCRUB=0"
      - run:
          name: Docker Compose Down
          command: make compose-stop
      - run:
          name: Copy Code Coverage Reports
          command: make compose-up-worker_1 DETACH=1 && docker cp jellyfish_worker_1_1:/usr/src/jellyfish/.nyc_output .nyc_output && make compose-stop

      - persist_to_workspace:
          root: .
          paths:
            - .nyc_output/*.json

  results:
    <<: *job_defaults

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Postgres Dump
          command: mkdir -p /tmp/test-results && cp dump-*.gz /tmp/test-results/

      - run:
          name: Webpack Bundle Report For UI
          command: make build-ui COVERAGE=0 NODE_ENV=test && mkdir -p /tmp/test-results/ui && cp dist/ui/webpack-bundle-report.html /tmp/test-results/ui/webpack-bundle-report.html
      - run:
          name: Webpack Bundle Report For Chat Widget
          command: make build-livechat COVERAGE=0 NODE_ENV=test && mkdir -p /tmp/test-results/livechat && cp dist/livechat/webpack-bundle-report.html /tmp/test-results/livechat/webpack-bundle-report.html
      - run:
          name: Generate Coverage Results
          command: mkdir -p /tmp/test-results && tar czf /tmp/test-results/nyc_output.tar.gz .nyc_output && rm .nyc_output/none-*.json && make coverage && cp -rf coverage /tmp/test-results
      - run:
          name: Git Stats
          command: gitstats -c start_date="1 month ago" . /tmp/test-results/gitstats

      # Store artifacts for debugging purposes
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - run:
          name: Generate Summary
          command: ./scripts/ci/summary.sh > SUMMARY

      - run:
          name: Post PR Summary
          command: GITHUB_TOKEN=$GITHUB_TOKEN node scripts/ci/github-pr-summary.js $CIRCLE_PULL_REQUEST ./SUMMARY

  eslint_jellyfish:
    <<: *job_defaults
    steps:
      - checkout
      - run:
          name: Test
          command: cd ./scripts/eslint-plugin-jellyfish && npm install && npm test

  clean_old_test_data:
    <<: *job_defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Clean up old test data
          command: |
            make clean-github
            make clean-front

workflows:
    version: 2
    build:
        jobs:
            - build:
                <<: *workflow_filter

            - compose-build:
                <<: *workflow_filter

            - unit_and_sync_tests:
                requires:
                    - build
                <<: *workflow_filter

            - integration_tests:
                requires:
                    - build
                <<: *workflow_filter

            - e2e_tests_server:
                requires:
                    - compose-build
                <<: *workflow_filter

            - e2e_tests_ui:
                requires:
                    - compose-build
                <<: *workflow_filter

            - e2e_tests_livechat:
                requires:
                    - compose-build
                <<: *workflow_filter

            - e2e_tests_server_previous_dump:
                requires:
                    - compose-build
                <<: *workflow_filter

            - e2e_tests_ui_previous_dump:
                requires:
                    - compose-build
                <<: *workflow_filter

            - e2e_tests_livechat_previous_dump:
                requires:
                    - compose-build
                <<: *workflow_filter

            - sync_tests_front_translate:
                requires:
                    - build
                <<: *workflow_filter

            - sync_tests_discourse_translate:
                requires:
                    - build
                <<: *workflow_filter

            - sync_tests_front_mirror:
                requires:
                    - compose-build
                <<: *workflow_filter

            - sync_tests_discourse_mirror:
                requires:
                    - compose-build
                <<: *workflow_filter

            - sync_tests_github_mirror:
                requires:
                    - compose-build
                <<: *workflow_filter

            - results:
                requires:
                  - unit_and_sync_tests
                  - integration_tests
                  - e2e_tests_server
                  - e2e_tests_ui
                  - e2e_tests_livechat
                  - e2e_tests_server_previous_dump
                  - e2e_tests_ui_previous_dump
                  - e2e_tests_livechat_previous_dump
                  - sync_tests_front_translate
                  - sync_tests_discourse_translate
                  - sync_tests_front_mirror
                  - sync_tests_discourse_mirror
                  - sync_tests_github_mirror
                <<: *workflow_filter

            - eslint_jellyfish:
                <<: *workflow_filter

            - clean_old_test_data:
                requires:
                    - build
                <<: *workflow_filter
