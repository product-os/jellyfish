#!/usr/bin/env node

/**
 * This script loads a file called `scratchpad.yaml` file from the root of the
 * project and creates a `scratchpad-entry` card for each item in the yaml file.
 * The yaml file is generated by the scratchpad Pensieve, the live version can
 * be found here https://github.com/resin-io/scratchpad/blob/master/scratchpad.yaml
 */
require('ts-node').register()

const {
	getSdk
} = require('../lib/sdk')
const Bluebird = require('bluebird')
const Spinner = require('cli-spinner').Spinner
const fs = require('fs')
const jsyaml = require('js-yaml')
const _ = require('lodash')
const removeMd = require('remove-markdown')

const yaml = fs.readFileSync('./scratchpad.yaml')

const source = jsyaml.load(yaml)

const USERNAME = process.env.USERNAME
const PASSWORD = process.env.PASSWORD
const API_URL = process.env.API_URL || 'http://localhost:8000'

if (!USERNAME) {
	throw new Error('Please set the USERNAME environment variable')
}
if (!PASSWORD) {
	throw new Error('Please set the PASSWORD environment variable')
}

const sdk = getSdk({
	apiPrefix: 'api/v2',
	apiUrl: API_URL
})

const migrateField = (data, origin, target) => {
	if (_.has(data, origin)) {
		// Check if target already exists
		if (data[target]) {
			data[target] = `${data[target]}\n\n${data[origin]}`
		} else {
			data[target] = data[origin]
		}
		delete data[origin]
	}
}

const entries = _.map(source.Scratchpad, ({
	Title,
	PS_UUID,
	...data
}) => {

	const tags = []

	// Remove 'Last updated' field
	if (data['Last Updated']) {
		delete data['Last Updated']
	}

	delete data['Date fixed']


	// Normalize boolean field
	if (_.isString(data['For resineer eyes only'])) {
		data['For resineer eyes only'] = data['For resineer eyes only'].toLowerCase() === 'yes'
	}

	if (data['For resineer eyes only']) {
		tags.push('non-shareable')
	}

	delete data['For resineer eyes only']

	// Sometimes fix diff is NaN or null
	if (!_.isNumber(data['Fix Difficulty']) || _.isNaN(data['Fix Difficulty'])) {
		delete data['Fix Difficulty']
	}

	if (_.has(data, [ 'Fix Difficulty' ])) {
		if (data['Fix Difficulty'] >= 3) {
			tags.push('hard')
		}

		delete data['Fix Difficulty']
	}

	// Fix mislabeld legacy fields
	if (_.isString(data.Legacy)) {
		data.Solution = data.Legacy
	}

	delete data.Legacy

	migrateField(data, 'Signs and Symptoms', 'Problem')
	migrateField(data, 'Symptoms:', 'Problem')
	migrateField(data, 'Symptoms', 'Problem')
	migrateField(data, 'Issue', 'Problem')
	migrateField(data, 'Treatments', 'Solution')
	migrateField(data, 'Treatment', 'Solution')
	migrateField(data, 'Fix', 'Solution')
	migrateField(data, 'Versions Affected', 'resinOS Versions Affected')
	migrateField(data, 'Fixed in Version', 'Fixed in resinOS Version')
	migrateField(data, '$PENSIEVE_IMPORTED_COPY_FIELD_KEY', 'Solution')
	migrateField(data, '$PENSIEVE_IMPORTED_COPY_FIELD_KEY1', 'Solution')

	delete data.Keywords

	if (data['Entry needs review']) {
		tags.push('needs-review')

		delete data['Entry needs review']
	}

	delete data['GitHub issue']
	delete data['Pull Leech Logs']
	delete data['resinOS Versions Affected']
	delete data['Supervisor Versions Affected']
	delete data['Fixed in resinOS Version']
	delete data['Fixed in Supervisor Version']

	const diff = _.difference(Object.keys(data), [
		'Problem',
		'Solution'
	])

	if (diff.length) {
		console.log(`Entry "${Title}" has non-typed fields:`)
		diff.forEach((key) => {
			console.log(`- ${key}`)
		})
	}

	return {
		type: 'scratchpad-entry',
		name: Title ? removeMd(Title) : 'No name set',
		tags,
		data
	}
})

const spinner = new Spinner(`%s Preparing to create ${entries.length} entries`)

spinner.start()

let count = 0

sdk.auth.login({
	username: USERNAME,
	password: PASSWORD
})
	.then(() => {
		return Bluebird.map(entries, (entry) => {
			return sdk.card.create(entry)
				.then(() => {
					spinner.setSpinnerTitle(`%s Created entry ${++count}/${entries.length}`)
				})
		}, {
			concurrency: 5
		})
	})
	.then(() => {
		spinner.stop(true)
		console.log('Done!')
	})
	.catch((error) => {
		console.log(error.message)
		throw error
	})
