#!/usr/bin/env node

/**
 * This script loads a file called `scratchpad.yaml` file from the root of the
 * project and creates a `scratchpad-entry` card for each item in the yaml file.
 * The yaml file is generated by the scratchpad Pensieve, the live version can
 * be found here https://github.com/resin-io/scratchpad/blob/master/scratchpad.yaml
 */

const {
	getSdk
} = require('@resin.io/jellyfish-sdk')
const Bluebird = require('bluebird')
const Spinner = require('cli-spinner').Spinner
const fs = require('fs')
const jsyaml = require('js-yaml')
const _ = require('lodash')
const moment = require('moment')

const yaml = fs.readFileSync('./scratchpad.yaml')

const source = jsyaml.load(yaml)

const USERNAME = process.env.USERNAME
const PASSWORD = process.env.PASSWORD
const API_URL = process.env.API_URL || 'http://localhost:8000'

if (!USERNAME) {
	console.log('Please set the USERNAME environment variable')
}
if (!PASSWORD) {
	console.log('Please set the PASSWORD environment variable')
}

const sdk = getSdk({
	apiPrefix: 'api/v2',
	apiUrl: API_URL
})

const entries = _.map(source.Scratchpad, ({
	Title,
	PS_UUID,
	...data
}) => {
	// Normalize timestamps
	if (data['Last Updated']) {
		data['Last Updated'] = moment(data['Last Updated']).toISOString()
	}

	if (data['Date fixed']) {
		data['Date fixed'] = moment(data['Date fixed']).toISOString()
	}


	// Normalize boolean field
	if (_.isString(data['For resineer eyes only'])) {
		data['For resineer eyes only'] = data['For resineer eyes only'].toLowerCase() === 'yes'
	}

	// Sometimes fix diff is NaN or null
	if (!_.isNumber(data['Fix Difficulty']) || _.isNaN(data['Fix Difficulty'])) {
		delete data['Fix Difficulty']
	}

	if (data['Fix Difficulty'] > 5) {
		data['Fix Difficulty'] = 5
	}

	// Fix mislabeld legacy fields
	if (_.isString(data.Legacy)) {
		data.description = data.Legacy
		delete data.Legacy
	}

	if (data.$PENSIEVE_IMPORTED_COPY_FIELD_KEY1) {
		if (data.Problem) {
			data.Problem = data.$PENSIEVE_IMPORTED_COPY_FIELD_KEY1 + '\n\n' + data.Problem
		} else {
			data.Problem = data.$PENSIEVE_IMPORTED_COPY_FIELD_KEY1
		}

		delete data.$PENSIEVE_IMPORTED_COPY_FIELD_KEY1
	}

	if (data.Keywords) {
		data.Keywords = data.Keywords.split(' ')
	}

	return {
		type: 'scratchpad-entry',
		name: Title || 'No name set',
		data
	}
})

const spinner = new Spinner(`%s Preparing to create ${entries.length} entries`)

spinner.start()

let count = 0

sdk.auth.login({
	username: 'lucian',
	password: 'password'
})
	.then(() => {
		return Bluebird.map(entries, (entry) => {
			return sdk.card.create(entry)
			.then(() => spinner.setSpinnerTitle(`%s Created entry ${++count}/${entries.length}`))
		}, {
			concurrency: 50
		})
	})
	.then(() => {
		spinner.stop(true)
		console.log('Done!')
	})
	.catch((error) => {
		throw error
	})
