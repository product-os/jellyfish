version: '2.1'

services:
  api:
    image: balena/jellyfish
    build:
      context: .
      dockerfile: apps/server/Dockerfile
      args:
        - NPM_TOKEN
    networks:
      - internal
    depends_on:
      - postgres
      - redis
      - tick
      {{#workers}}
      - worker_{{idx}}
      {{/workers}}
      - balena-mdns-publisher
    environment:
      - DATABASE={{DATABASE}}
      - LOGENTRIES_TOKEN
      - LOGLEVEL=crit
      - NODE_ENV={{NODE_ENV}}
      - POD_NAME={{POD_NAME}}
      - PORT={{PORT}}
      - POSTGRES_DATABASE={{POSTGRES_DATABASE}}
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT={{POSTGRES_PORT}}
      - POSTGRES_USER=docker
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis
      - REDIS_PORT={{REDIS_PORT}}
      - SENTRY_DSN_SERVER
      - SERVER_DATABASE={{SERVER_DATABASE}}
      - SERVER_HOST={{& SERVER_HOST}}
      - SERVER_PORT={{SERVER_PORT}}
      - METRICS_PORT={{METRICS_PORT}}
      - SOCKET_METRICS_PORT={{SOCKET_METRICS_PORT}}
      - TEST_USER_ORGANIZATION={{TEST_USER_ORGANIZATION}}
      - TEST_USER_PASSWORD={{TEST_USER_PASSWORD}}
      - TEST_USER_ROLE={{TEST_USER_ROLE}}
      - TEST_USER_USERNAME={{TEST_USER_USERNAME}}
      - FS_DRIVER
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_S3_BUCKET_NAME
      - INTEGRATION_BALENA_API_PRIVATE_KEY
      - INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION
      - INTEGRATION_BALENA_API_PUBLIC_KEY_STAGING
      - INTEGRATION_BALENA_API_APP_ID
      - INTEGRATION_BALENA_API_APP_SECRET
      - INTEGRATION_BALENA_API_OAUTH_BASE_URL
      - INTEGRATION_DEFAULT_USER
      - INTEGRATION_INTERCOM_TOKEN
      - INTEGRATION_FRONT_TOKEN
      - INTEGRATION_GITHUB_TOKEN
      - INTEGRATION_GITHUB_SIGNATURE_KEY
      - INTEGRATION_GITHUB_PRIVATE_KEY
      - INTEGRATION_GITHUB_APP_ID
      - INTEGRATION_FLOWDOCK_SIGNATURE_KEY
      - INTEGRATION_DISCOURSE_TOKEN
      - INTEGRATION_DISCOURSE_USERNAME
      - INTEGRATION_DISCOURSE_SIGNATURE_KEY
      - INTEGRATION_OUTREACH_APP_ID
      - INTEGRATION_OUTREACH_APP_SECRET
      - INTEGRATION_OUTREACH_SIGNATURE_KEY
      - MAILGUN_TOKEN
      - MAILGUN_DOMAIN
      - MAILGUN_BASE_URL
      - RESET_PASSWORD_SECRET_TOKEN
      - MONITOR_SECRET_TOKEN=TEST
    healthcheck:
      interval: 30s
      retries: 5
      test:
        - CMD
        - curl
        - --fail
        - http://localhost:{{SERVER_PORT}}/health
      timeout: 10s
    expose:
      - 80
    restart: always
  livechat:
    build:
      args:
        - SERVER_HOST=http://api.ly.fish.local
        - SERVER_PORT=80
        - NPM_TOKEN
      context: .
      dockerfile: apps/livechat/Dockerfile
    depends_on:
      - api
      - balena-mdns-publisher
    networks:
      - internal
    environment:
      NGINX_PORT: 80
  postgres:
    image: balena/open-balena-db:4.1.0
    restart: always
    networks:
      - internal
  redis:
    image: balena/balena-redis:0.0.3
    command: [sh, -c, "redis-server /usr/local/etc/redis/redis.conf --save ''"]
    restart: always
    networks:
      - internal
  sidecar:
    build:
      context: .
      dockerfile: apps/sidecar/Dockerfile
      args:
        - NPM_TOKEN
    depends_on:
      - api
      - livechat
      - postgres
      - ui
      - balena-mdns-publisher
    environment:
      DATABASE: {{DATABASE}}
      LIVECHAT_HOST: http://livechat
      LIVECHAT_PORT: 80
      NODE_ENV: {{NODE_ENV}}
      POSTGRES_DATABASE: {{POSTGRES_DATABASE}}
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: docker
      POSTGRES_USER: docker
      SERVER_HOST: http://api
      SERVER_PORT: {{SERVER_PORT}}
      UI_HOST: http://ui
      UI_PORT: 80
    networks:
      - internal
    healthcheck:
      interval: 10s
      retries: 10
      test:
        - CMD
        - curl
        - --fail
        - http://api:8000/ping
      timeout: 10s
    restart: always
  tick:
    image: balena/jellyfish-tick-server
    build:
      context: .
      dockerfile: apps/action-server/Dockerfile.tick
      args:
        - NPM_TOKEN
    depends_on:
      - postgres
      - redis
      - balena-mdns-publisher
    environment:
      - DATABASE={{DATABASE}}
      - LOGENTRIES_TOKEN
      - NODE_ENV={{NODE_ENV}}
      - POSTGRES_DATABASE={{POSTGRES_DATABASE}}
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT={{POSTGRES_PORT}}
      - POSTGRES_USER=docker
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis
      - REDIS_PORT={{REDIS_PORT}}
      - LOGLEVEL=crit
      - SENTRY_DSN_SERVER
      - FS_DRIVER
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_S3_BUCKET_NAME
      - INTEGRATION_BALENA_API_PRIVATE_KEY
      - INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION
      - INTEGRATION_BALENA_API_PUBLIC_KEY_STAGING
      - INTEGRATION_BALENA_API_APP_ID
      - INTEGRATION_BALENA_API_APP_SECRET
      - INTEGRATION_BALENA_API_OAUTH_BASE_URL
      - INTEGRATION_DEFAULT_USER
      - INTEGRATION_INTERCOM_TOKEN
      - INTEGRATION_FRONT_TOKEN
      - INTEGRATION_GITHUB_TOKEN
      - INTEGRATION_GITHUB_SIGNATURE_KEY
      - INTEGRATION_GITHUB_PRIVATE_KEY
      - INTEGRATION_GITHUB_APP_ID
      - INTEGRATION_FLOWDOCK_SIGNATURE_KEY
      - INTEGRATION_DISCOURSE_TOKEN
      - INTEGRATION_DISCOURSE_USERNAME
      - INTEGRATION_DISCOURSE_SIGNATURE_KEY
      - INTEGRATION_OUTREACH_APP_ID
      - INTEGRATION_OUTREACH_APP_SECRET
      - INTEGRATION_OUTREACH_SIGNATURE_KEY
      - MAILGUN_TOKEN
      - MAILGUN_DOMAIN
      - MAILGUN_BASE_URL
      - RESET_PASSWORD_SECRET_TOKEN
    restart: always
    networks:
      - internal
  ui:
    build:
      args:
        - SENTRY_DSN_UI='0'
        - SERVER_HOST=http://api.ly.fish.local
        - SERVER_PORT=80
        - NPM_TOKEN
      context: .
      dockerfile: apps/ui/Dockerfile
    depends_on:
      - api
      - balena-mdns-publisher
    environment:
      NGINX_PORT: 80
      NODE_ENV: {{NODE_ENV}}
    networks:
      - internal
  {{#workers}}
  worker_{{idx}}:
    image: balena/jellyfish-action-server
    build:
      context: .
      dockerfile: apps/action-server/Dockerfile.worker
      args:
        - NPM_TOKEN
    depends_on:
      - postgres
      - redis
      - balena-mdns-publisher
    environment:
      - DATABASE={{DATABASE}}
      - LOGLEVEL=crit
      - NODE_ENV={{NODE_ENV}}
      - POSTGRES_DATABASE={{POSTGRES_DATABASE}}
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT={{POSTGRES_PORT}}
      - POSTGRES_USER=docker
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis
      - REDIS_PORT={{REDIS_PORT}}
      - SENTRY_DSN_SERVER
      - LOGENTRIES_TOKEN
      - FS_DRIVER
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_S3_BUCKET_NAME
      - INTEGRATION_BALENA_API_PRIVATE_KEY
      - INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION
      - INTEGRATION_BALENA_API_PUBLIC_KEY_STAGING
      - INTEGRATION_BALENA_API_APP_ID
      - INTEGRATION_BALENA_API_APP_SECRET
      - INTEGRATION_BALENA_API_OAUTH_BASE_URL
      - INTEGRATION_DEFAULT_USER
      - INTEGRATION_INTERCOM_TOKEN
      - INTEGRATION_FRONT_TOKEN
      - INTEGRATION_GITHUB_TOKEN
      - INTEGRATION_GITHUB_SIGNATURE_KEY
      - INTEGRATION_GITHUB_PRIVATE_KEY
      - INTEGRATION_GITHUB_APP_ID
      - INTEGRATION_FLOWDOCK_SIGNATURE_KEY
      - INTEGRATION_DISCOURSE_TOKEN
      - INTEGRATION_DISCOURSE_USERNAME
      - INTEGRATION_DISCOURSE_SIGNATURE_KEY
      - INTEGRATION_OUTREACH_APP_ID
      - INTEGRATION_OUTREACH_APP_SECRET
      - INTEGRATION_OUTREACH_SIGNATURE_KEY
      - MAILGUN_TOKEN
      - MAILGUN_DOMAIN
      - MAILGUN_BASE_URL
      - RESET_PASSWORD_SECRET_TOKEN
      - METRICS_PORT={{METRICS_PORT}}
      - MONITOR_SECRET_TOKEN=TEST
    restart: always
    networks:
      - internal
  {{/workers}}
  balena-mdns-publisher:
    image: 'balena/balena-mdns-publisher:master'
    network_mode: host
    cap_add:
      - SYS_RESOURCE
      - SYS_ADMIN
    security_opt:
      - 'apparmor:unconfined'
    tmpfs:
      - /run
      - /sys/fs/cgroup
    labels:
      io.balena.features.dbus: '1'
      io.balena.features.supervisor-api: '1'
    environment:
      MDNS_TLD: ly.fish.local
      MDNS_SUBDOMAINS: >-
        ["jel", "livechat", "api"]
      DBUS_SESSION_BUS_ADDRESS: 'unix:path=/host/run/dbus/system_bus_socket'
      CONFD_BACKEND: 'ENV'
  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    command: "--config.file=/etc/prometheus/prometheus.yaml"
    ports:
      - '9090:9090'
    restart: always
    networks:
      - internal
  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    restart: always
    networks:
      - internal
  haproxy:
    image: 'balena/open-balena-haproxy:2.11.3'
    cap_add:
      - SYS_RESOURCE
      - SYS_ADMIN
    security_opt:
      - 'apparmor:unconfined'
    tmpfs:
      - /run
      - /sys/fs/cgroup
    depends_on:
      {{#workers}}
      - worker_{{idx}}
      {{/workers}}
      - ui
      - tick
      - sidecar
      - livechat
      - api
      - balena-mdns-publisher
    ports:
      - '80:80'
      - '{{POSTGRES_PORT}}:{{POSTGRES_PORT}}'
      - '{{REDIS_PORT}}:{{REDIS_PORT}}'
    networks:
      internal:
        aliases:
          - jel.ly.fish.local
          - livechat.ly.fish.local
          - api.ly.fish.local
    environment:
      DOMAIN_INC_UUID: 'false'
      AUTOGENERATE_CERTS: 'false'
      AUTH_TOKEN: <token>
      STATIC_DNS_IP: <ip>
      CONFD_BACKEND: 'ENV'
      PROXY_CONFIG: {{& HAPROXY_CONFIG}}

networks:
  internal: {}
