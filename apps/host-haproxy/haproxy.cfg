global
		tune.ssl.default-dh-param 1024
		# https://github.com/haproxytech/haproxy-lua-cors
		lua-load /usr/local/etc/haproxy/cors.lua
		# https://www.haproxy.com/blog/introduction-to-haproxy-logging/
		log stdout format raw daemon "${LOGLEVEL}"
		log stderr format raw daemon "${LOGLEVEL}"
		ssl-default-bind-options ssl-min-ver TLSv1.3
		# enable the Runtime API
		# example:
		# echo "show servers state api-backend" | nc localhost 9090
		# echo "show servers state" | nc localhost 9090
		stats socket ipv4@0.0.0.0:9090 level admin
		stats timeout 2m

defaults
		default-server init-addr last,libc,none
		default-server inter 3s rise 2 fall 3
		log global
		mode http
		option contstats
		option dontlognull
		option forwardfor
		option httplog
		timeout client 63s
		timeout connect 1s
		timeout http-keep-alive 1s
		timeout http-request 63s
		timeout server 63s
		# https://www.haproxy.com/blog/websockets-load-balancing-with-haproxy/
		timeout tunnel 3600s

resolvers docker-bridge-resolver
		# Use the dnsmasq as the docker-resolver
		nameserver docker-resolver 127.0.0.1:5355
		hold valid 0ms

http-errors jf-http-errors
		errorfile 400 /etc/haproxy/errors/400.http
		errorfile 401 /etc/haproxy/errors/401.http
		errorfile 403 /etc/haproxy/errors/403.http
		errorfile 404 /etc/haproxy/errors/404.http
		errorfile 500 /etc/haproxy/errors/500.http
		errorfile 502 /etc/haproxy/errors/502.http
		errorfile 503 /etc/haproxy/errors/503.http

userlist balena
		user balena insecure-password "${BALENA_DEVICE_UUID}"

listen haproxy-stats
		bind :::1936 v4v6 ssl crt "${CERT_CHAIN_PATH}"
		stats auth "balena:${BALENA_DEVICE_UUID}"
		stats enable
		stats uri /metrics

listen api-metrics
		bind :::9000 v4v6
		server api-metrics api:9000 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 9000

listen socket-io-metrics
		bind :::9001 v4v6
		server socket-io-metrics api:9001 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 9001

listen postgres
		mode tcp
		bind :::5432 v4v6
		server postgres postgres:5432 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 5432

listen redis
		mode tcp
		bind :::6379 v4v6
		server redis redis:6379 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 6379

frontend http
		bind :::80 v4v6
		errorfiles jf-http-errors
		http-request capture req.hdr(Host) len 15
		http-response lua.cors
		# https://www.haproxy.com/blog/haproxy-log-customization/
		# https://www.haproxy.com/documentation/hapee/1-8r1/onepage/#8.2.4
		# Using a custom format that prints the backend IP instead of the name ( which is shared between all instances )
		log-format "%ci:%cp [%tr] %ft %b/%s[%si:%sp]%sq %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

		acl api_dead nbsrv(api-backend) lt 1
		acl ui_dead nbsrv(ui-backend) lt 1
		monitor-uri /health
		monitor fail if api_dead ui_dead

		# requests to wifi-connect (Host: 192.168.42.1)
		default_backend wifi-connect-backend

		acl host-ui-backend hdr_beg(host) -i "jel."
		# Match any livechat subdomain
		acl host-livechat-backend hdr_reg(host) -i "(^[^\.])?(livechat\.)"
		# default public device URL(s) v1 always go to the Jellyfish UI
		acl host-pdu-default hdr_beg(host) -i "${BALENA_DEVICE_UUID}"
		# FIXME: balena-proxy should be adding X-Forwarded-For headers
		http-request add-header X-Forwarded-Proto http if host-ui-backend || host-livechat-backend
		http-request add-header X-Forwarded-Proto https if host-pdu-default
		use_backend ui-backend if host-ui-backend || host-pdu-default || host-livechat-backend

		acl host-ca-backend hdr_beg(host) -i "ca."
		# only allow CRL requests unauthenticated, protect everything else
		acl path-balena-ca-crl path -i -m beg /api/v1/cfssl/crl
		acl balena-ca-auth http_auth(balena)
		http-request auth realm balena-ca if host-ca-backend !balena-ca-auth !path-balena-ca-crl
		use_backend ca-backend if host-ca-backend

		acl host-ocsp-backend hdr_beg(host) -i "ocsp."
		use_backend ocsp-backend if host-ocsp-backend

		acl host-api-backend hdr_sub(host) -i "api."
		acl path-api-metrics path -i -m beg /metrics
		acl path-registry-token-auth path_beg -i /auth/v1/token
		# path re-write rather than hardcode in open-balena-base|configure-balena.sh
		http-request set-path /api/v2/registry if host-api-backend path-registry-token-auth
		use_backend api-backend if host-api-backend !path-api-metrics
		use_backend metrics-api-backend if host-api-backend path-api-metrics

		acl host-registry-backend hdr_sub(host) -i "registry."
		use_backend registry-backend if host-registry-backend

		acl host-grafana-backend hdr_sub(host) -i "grafana."
		use_backend grafana-backend if host-grafana-backend

		acl host-prometheus-backend hdr_sub(host) -i "prometheus."
		use_backend prometheus-backend if host-prometheus-backend

		acl host-s3-backend hdr_beg(host) -i "s3."
		use_backend s3-backend if host-s3-backend

		acl host-minio-backend hdr_beg(host) -i "minio."
		use_backend minio-backend if host-minio-backend

frontend https
		bind :::443 v4v6 ssl crt "${CERT_CHAIN_PATH}" alpn h2,http/1.1
		default_backend ui-backend
		errorfiles jf-http-errors
		http-request add-header X-Forwarded-Proto https
		http-request add-header X-Forwarded-Port 443
		http-request capture req.hdr(Host) len 15
		http-response lua.cors
		# https://www.haproxy.com/blog/haproxy-log-customization/
		# https://www.haproxy.com/documentation/hapee/1-8r1/onepage/#8.2.4
		# Using a custom format that prints the backend IP instead of the name ( which is shared between all instances )
		log-format "%ci:%cp [%tr] %ft %b/%s[%si:%sp]%sq %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

		acl host-ca-backend hdr_beg(host) -i "ca."
		# only allow CRL requests unauthenticated, protect everything else
		acl path-balena-ca-crl path -i -m beg /api/v1/cfssl/crl
		acl balena-ca-auth http_auth(balena)
		http-request auth realm balena-ca if host-ca-backend !balena-ca-auth !path-balena-ca-crl
		use_backend ca-backend if host-ca-backend

		acl host-ocsp-backend hdr_beg(host) -i "ocsp."
		use_backend ocsp-backend if host-ocsp-backend

		acl host-api-backend hdr_sub(host) -i "api."
		acl path-api-metrics path -i -m beg /metrics
		acl path-registry-token-auth path_beg -i /auth/v1/token
		# path re-write rather than hardcode in open-balena-base|configure-balena.sh
		http-request set-path /api/v2/registry if host-api-backend path-registry-token-auth
		use_backend api-backend if host-api-backend !path-api-metrics
		use_backend metrics-api-backend if host-api-backend path-api-metrics

		acl host-registry-backend hdr_sub(host) -i "registry."
		use_backend registry-backend if host-registry-backend

		acl host-grafana-backend hdr_sub(host) -i "grafana."
		use_backend grafana-backend if host-grafana-backend

		acl host-prometheus-backend hdr_sub(host) -i "prometheus."
		use_backend prometheus-backend if host-prometheus-backend

		acl host-s3-backend hdr_beg(host) -i "s3."
		use_backend s3-backend if host-s3-backend

		acl host-minio-backend hdr_beg(host) -i "minio."
		use_backend minio-backend if host-minio-backend

backend api-backend
		# disable http chek to avoid flooding the logs, instead use the standard connect check
		# option httpchk
		# http-check send meth GET uri /health
		# http-check expect status 200
		
		# Waiting for nodeping config to confirm which values should we use here to that both monitoring tools match
		# timeout check 5s
		balance roundrobin
		# Fail fast to move the request to another backend if available
		timeout connect 250ms
		timeout check 250ms
		retries 4
		option redispatch
		retry-on empty-response conn-failure 503
		# Start with servers disabled, will be dynamically enabled by the handover-sidecar. Using non-routeable IP addresses
		server api0 10.16.16.10:80 check port 80 disabled
		server api1 10.16.16.11:80 check port 80 disabled
		server api2 10.16.16.12:80 check port 80 disabled
		server api3 10.16.16.13:80 check port 80 disabled
		server api4 10.16.16.14:80 check port 80 disabled
		server api5 10.16.16.15:80 check port 80 disabled
		server api6 10.16.16.16:80 check port 80 disabled
		server api7 10.16.16.17:80 check port 80 disabled
		server api8 10.16.16.18:80 check port 80 disabled
		server api9 10.16.16.19:80 check port 80 disabled
		server api10 10.16.16.20:80 check port 80 disabled
		server api11 10.16.16.21:80 check port 80 disabled

backend metrics-api-backend
		server api-metrics api:9000 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 9000

# (TBC) wire up using different hostname or metrics path or poll directly
backend metrics-socket-backend
		server socket-io-metrics api:9001 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 9001

backend ui-backend
		balance roundrobin
		timeout connect 500ms
		timeout check 500ms
		retries 3
		option redispatch
		retry-on empty-response conn-failure 503
		server ui ui:80 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 80

backend registry-backend
		server registry registry:80 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 80

backend s3-backend
		server s3 s3:80 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 80

# https://github.com/minio/console
backend minio-backend
		server s3-console s3:43697 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 43697

backend grafana-backend
		server grafana grafana:3000 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 3000

backend prometheus-backend
		server prometheus prometheus:9090 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 9090

backend ca-backend
		server cfssl-ca balena-ca:8888 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 8888

backend ocsp-backend
		server cfssl-ocsp balena-ca:8889 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 8889

backend wifi-connect-backend
		server wifi-connect 192.168.42.1:1337 check port 1337
