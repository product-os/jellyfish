global
		tune.ssl.default-dh-param 1024
		# https://github.com/haproxytech/haproxy-lua-cors
		lua-load /usr/local/etc/haproxy/cors.lua
		# https://www.haproxy.com/blog/introduction-to-haproxy-logging/
		log stdout format raw daemon "${LOGLEVEL}"
		log stderr format raw daemon "${LOGLEVEL}"

defaults
		balance roundrobin
		default-server init-addr last,libc,none
		default-server inter 3s rise 2 fall 3
		log global
		mode http
		option contstats
		option dontlognull
		option forwardfor
		option httplog
		timeout connect 5s
		timeout client 180s
		timeout server 180s

resolvers docker-bridge-resolver
		nameserver docker-resolver 127.0.0.11:53
		hold valid 0ms

http-errors jf-http-errors
		errorfile 400 /etc/haproxy/errors/400.http
		errorfile 401 /etc/haproxy/errors/401.http
		errorfile 403 /etc/haproxy/errors/403.http
		errorfile 404 /etc/haproxy/errors/404.http
		errorfile 500 /etc/haproxy/errors/500.http
		errorfile 502 /etc/haproxy/errors/502.http
		errorfile 503 /etc/haproxy/errors/503.http

userlist balena
		user balena insecure-password "${BALENA_DEVICE_UUID}"

listen haproxy-stats
		bind :::1936 v4v6 ssl crt "${CERT_CHAIN_PATH}"
		stats auth "balena:${BALENA_DEVICE_UUID}"
		stats enable
		stats uri /metrics

listen postgres
		mode tcp
		bind :::5432 v4v6
		server postgres postgres:5432 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 5432

listen redis
		mode tcp
		bind :::6379 v4v6
		server redis redis:6379 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 6379

frontend http
		bind :::80 v4v6
		errorfiles jf-http-errors
		http-request capture req.hdr(Host) len 15
		http-response lua.cors
		# https://www.haproxy.com/blog/haproxy-log-customization/
		log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

		# requests to wifi-connect (Host: 192.168.42.1)
		default_backend wifi-connect-backend

		acl host-ui-backend hdr_beg(host) -i "jel."
		# default public device URL(s) always go to the Jellyfish UI
		acl host-pdu-default hdr_beg(host) -i "${BALENA_DEVICE_UUID}"
		http-request add-header X-Forwarded-Proto http if host-ui-backend
		http-request add-header X-Forwarded-Port 80 if host-ui-backend
		http-request add-header X-Forwarded-Proto https if host-pdu-default
		http-request add-header X-Forwarded-Port 443 if host-pdu-default
		use_backend ui-backend if host-ui-backend || host-pdu-default

		# https://www.haproxy.com/blog/redirect-http-to-https-with-haproxy/
		http-request redirect scheme https unless host-pdu-default

frontend https
		bind :::443 v4v6 ssl crt "${CERT_CHAIN_PATH}" alpn h2,http/1.1
		default_backend ui-backend
		errorfiles jf-http-errors
		http-request add-header X-Forwarded-Proto https
		http-request add-header X-Forwarded-Port 443
		http-request capture req.hdr(Host) len 15
		http-response lua.cors
		log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

		default_backend ui-backend

		acl host-ca-backend hdr_beg(host) -i "ca."
		# only allow CRL requests unauthenticated, protect everything else
		acl path-balena-ca-crl path -i -m beg /api/v1/cfssl/crl
		acl balena-ca-auth http_auth(balena)
		http-request auth realm balena-ca if host-ca-backend !balena-ca-auth !path-balena-ca-crl
		use_backend ca-backend if host-ca-backend

		acl host-ocsp-backend hdr_beg(host) -i "ocsp."
		use_backend ocsp-backend if host-ocsp-backend

		acl host-livechat-backend hdr_sub(host) -i "livechat."
		use_backend livechat-backend if host-livechat-backend

		acl host-api-backend hdr_sub(host) -i "api."
		acl path-api-metrics path -i -m beg /metrics
		acl path-registry-token-auth path_beg -i /auth/v1/token
		# path re-write rather than hardcode in open-balena-base|configure-balena.sh
		http-request set-path /api/v2/registry if host-api-backend path-registry-token-auth
		use_backend api-backend if host-api-backend !path-api-metrics
		use_backend metrics-api-backend if host-api-backend path-api-metrics

		acl host-registry-backend hdr_sub(host) -i "registry."
		use_backend registry-backend if host-registry-backend

		acl host-grafana-backend hdr_sub(host) -i "grafana."
		use_backend grafana-backend if host-grafana-backend

		acl host-prometheus-backend hdr_sub(host) -i "prometheus."
		use_backend prometheus-backend if host-prometheus-backend

		acl host-s3-backend hdr_beg(host) -i "s3."
		use_backend s3-backend if host-s3-backend

		acl host-minio-backend hdr_beg(host) -i "minio."
		use_backend minio-backend if host-minio-backend

backend api-backend
		server api api:80 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 80

backend metrics-api-backend
		server api api:9000 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 9000

# (TBC) wire up using different hostname or metrics path
backend metrics-socket-backend
		server api api:9001 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 9001

backend ui-backend
		server ui ui:80 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 80

backend livechat-backend
		server livechat livechat:80 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 80

backend registry-backend
		server registry registry:80 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 80

backend s3-backend
		server s3 s3:80 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 80

# https://github.com/minio/console
backend minio-backend
		server s3-console s3:43697 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 43697

backend grafana-backend
		server grafana grafana:3000 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 3000

backend prometheus-backend
		server prometheus prometheus:9090 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 9090

backend ca-backend
		server cfssl-ca balena-ca:8888 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 8888

backend ocsp-backend
		server cfssl-ocsp balena-ca:8889 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 8889

backend wifi-connect-backend
		server wifi-connect 192.168.42.1:1337 check port 1337
