---
name: deploy balenaCloud
# https://github.com/product-os/flowzone/tree/master/.github/actions
inputs:
  json:
    description: "JSON stringified object containing all the inputs from the calling workflow"
    required: true
  secrets:
    description: "JSON stringified object containing all the secrets from the calling workflow"
    required: true

  # --- custom environment
  AWS_EC2_INSTANCE_TYPE:
    type: string
    default: "c6a.xlarge"
  AWS_EC2_LAUNCH_TEMPLATE:
    type: string
    default: "lt-0716bda3583150eaa"
  AWS_EC2_LT_VERSION:
    type: number
    default: 8
  AWS_IAM_USERNAME:
    type: string
    default: "jellyfish-tests-iam-User-Q6SZ9PAHLZAE"
  AWS_REGION:
    type: string
    default: "us-east-1"
  AWS_VPC_SECURITY_GROUP_IDS:
    type: string
    default: "sg-09f3c836cfe28939c"
  AWS_VPC_SUBNET_IDS:
    type: string
    default: "subnet-0ae657c99739c192f subnet-0235593b90b9d5262"
  BALENA_CLI_URL:
    type: string
    default: "https://github.com/balena-io/balena-cli/releases/download"
  BALENA_CLI_VERSION:
    type: string
    default: "14.3.1"
  # https://github.com/balena-io/balena-cli/issues/2447
  DEBUG:
    type: number
    default: 0
  DEVICE_TYPE:
    type: string
    default: "genericx86-64-ext"
  DNS_TLD:
    type: string
    default: "ly.fish.local"
  FLEET:
    type: string
    default: "product_os/jellyfish"
  GIT_SECRETS:
    type: string
    default: ".balena/secrets"
  JELLYFISH_TESTS_SERVICE:
    type: string
    default: "jellyfish-tests"
  JELLYFISH_TESTS:
    type: string
    default: |
      wait-for-api \
      integration-server \
      e2e e2e-ui \
      export-database \
      import-database \
      e2e-server-previous-dump
  LIVECHAT_PORT:
    type: number
    default: 443
  LOGLEVEL:
    type: string
    default: "warning"
  NODE_ENV:
    type: string
    default: "test"
  POSTGRES_DATABASE:
    type: string
    default: "jellyfish"
  POSTGRES_HOST:
    type: string
    default: "postgres"
  POSTGRES_PASSWORD:
    type: string
    default: "docker"
  POSTGRES_USER:
    type: string
    default: "docker"
  REDIS_HOST:
    type: string
    default: "redis"
  REGISTRY2_CACHE_ADDR:
    type: string
    default: "redis:6379"
  REGISTRY2_STORAGEPATH:
    type: string
    default: "/data"
  RELEASES:
    type: number
    default: 50
  RETRY:
    type: number
    default: 3
  SERVER_PORT:
    type: number
    default: 443
  SOCAT_VERSION:
    type: string
    default: "1.7.4.2"
  UI_PORT:
    type: number
    default: 443
  VARIANT:
    type: string
    default: "prod"
  VERBOSE:
    type: string
    default: "false"

runs:
  # https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
  using: "composite"
  steps:
    # FIXME: merge ssh-uuid into balena-cli to reduce dependencies/verbosity
    # https://github.com/pdcastro/ssh-uuid#why
    # https://github.com/pdcastro/ssh-uuid#linux-debian-ubuntu-others
    - name: install additional dependencies
      id: extra-dependencies
      shell: bash
      run: |
        set -ue

        [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

        BALENA_CLI_URL='${{ inputs.BALENA_CLI_URL }}'
        BALENA_CLI_VERSION='${{ inputs.BALENA_CLI_VERSION }}'
        SOCAT_VERSION='${{ inputs.SOCAT_VERSION }}'

        sudo apt update && sudo apt install -y \
          awscli \
          build-essential \
          git-secret \
          libreadline-dev \
          libssl-dev \
          libwrap0-dev \
          ssh

        if ! [[ "$(${RUNNER_TEMP}/balena-cli/balena version)" =~ "${BALENA_CLI_VERSION}" ]]; then
            release_zip="balena-cli-v${BALENA_CLI_VERSION}-linux-x64-standalone.zip"

            wget -q "${BALENA_CLI_URL}/v${BALENA_CLI_VERSION}/${release_zip}" \
              && unzip -q "${release_zip}" -d "${RUNNER_TEMP}" \
              && rm "${release_zip}"
        fi

        "${RUNNER_TEMP}/balena-cli/balena" login \
          --token '${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}'

        "${RUNNER_TEMP}/balena-cli/balena" version

        grep -q "${RUNNER_TEMP}/balena-cli" "${GITHUB_PATH}" \
          || echo "${RUNNER_TEMP}/balena-cli" >> "${GITHUB_PATH}"

        mkdir -p "${RUNNER_TEMP}/ssh-uuid"

        wget -q -O "${RUNNER_TEMP}/ssh-uuid/ssh-uuid" https://raw.githubusercontent.com/pdcastro/ssh-uuid/master/ssh-uuid.sh \
          && chmod +x "${RUNNER_TEMP}/ssh-uuid/ssh-uuid" \
          && ln -s "${RUNNER_TEMP}/ssh-uuid/ssh-uuid" "${RUNNER_TEMP}/ssh-uuid/scp-uuid"

        "${RUNNER_TEMP}/ssh-uuid/scp-uuid" --help

        grep -q "${RUNNER_TEMP}/ssh-uuid" "${GITHUB_PATH}" \
          || echo "${RUNNER_TEMP}/ssh-uuid" >> "${GITHUB_PATH}"

        if ! [[ "$(socat -V)" =~ "socat version ${SOCAT_VERSION}" ]]; then
            curl --silent --retry ${{ inputs.RETRY }} --fail \
              http://www.dest-unreach.org/socat/download/socat-${SOCAT_VERSION}.tar.gz | tar -xzvf - \
              && cd socat-${SOCAT_VERSION} \
              && ./configure \
              && make \
              && sudo make install \
              && rm -rf socat-${SOCAT_VERSION}
        fi

        socat -V

    - name: push draft or finalise release
      # https://github.com/actions/runner/issues/1979
      #timeout-minutes: 60
      id: push-release
      uses: balena-io/deploy-to-balena-action@master
      with:
        balena_token: ${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}
        cache: false
        environment: ${{ fromJSON(inputs.json).balena_environment }}
        fleet: ${{ inputs.FLEET }}
        github_token: ${{ fromJSON(inputs.secrets).github_token }}
        source: ${{ fromJSON(inputs.json).working_directory }}
        versionbot: false

    - name: import GPG key
      id: import-gpg-key
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
      uses: crazy-max/ghaction-import-gpg@v4
      with:
        gpg_private_key: ${{ fromJSON(inputs.secrets).GPG_PRIVATE_KEY }}
        passphrase: ${{ fromJSON(inputs.secrets).GPG_PASSPHRASE }}

    - name: imported GPG key
      id: imported-gpg-key
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
      shell: bash
      run: |
        echo 'fingerprint: ${{ steps.import-gpg-key.outputs.fingerprint }}'
        echo 'keyid:       ${{ steps.import-gpg-key.outputs.keyid }}'
        echo 'name:        ${{ steps.import-gpg-key.outputs.name }}'
        echo 'email:       ${{ steps.import-gpg-key.outputs.email }}'

    - name: reveal secrets
      id: reveal-secrets
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
      shell: bash
      run: |
        set -ue

        [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

        git secret reveal -fp '${{ fromJSON(inputs.secrets).GPG_PASSPHRASE }}'

    - name: (pre)register test device
      id: register-test-device
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
      shell: bash
      run: |
        set -ue

        [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

        balena login --token '${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}'

        balena_device_uuid="$(openssl rand -hex 16)"

        # https://www.balena.io/docs/learn/more/masterclasses/advanced-cli/#52-preregistering-a-device
        balena device register '${{ inputs.FLEET }}' --uuid "${balena_device_uuid}"

        device_id="$(balena device "${balena_device_uuid}" | grep ^ID: | cut -c20-)"

        # the actual version deployed depends on the AWS EC2/AMI, defined in AWS_EC2_LAUNCH_TEMPLATE
        os_version="$(balena os versions ${{ inputs.DEVICE_TYPE }} \
          | grep '${{ inputs.VARIANT }}' | head -n 1 | sed 's/.${{ inputs.VARIANT }}//g')"

        balena config generate \
          --version "${os_version}" \
          --device ${balena_device_uuid} \
          --network ethernet \
          --appUpdatePollInterval 10 \
          --output config.json

        balena tag set balena ephemeral-test-device --device "${balena_device_uuid}"

        github_vars=(GITHUB_ACTOR GITHUB_BASE_REF GITHUB_HEAD_REF GITHUB_JOB \
          GITHUB_REF GITHUB_REF_NAME GITHUB_REF_TYPE GITHUB_REPOSITORY \
          GITHUB_REPOSITORY_OWNER GITHUB_RUN_ATTEMPT GITHUB_RUN_ID GITHUB_RUN_NUMBER \
          GITHUB_SHA GITHUB_WORKFLOW RUNNER_ARCH RUNNER_NAME RUNNER_OS)

        for github_var in "${github_vars[@]}"; do
            balena tag set ${github_var} "${!github_var}" --device "${balena_device_uuid}"
        done

        echo "::set-output name=balena_device_uuid::${balena_device_uuid}"
        echo "::set-output name=balena_device_id::${device_id}"

    # FIXME: https://github.com/balena-io/deploy-to-balena-action/issues/193
    # https://github.com/balena-io/deploy-to-balena-action#outputs
    # https://github.com/balena-io/balena-cli/issues/2351
    - name: pin device to draft release
      id: pin-device
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
      shell: 'script -q -e -c "bash {0}"'
      run: |
        set -uae

        [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

        balena login --token '${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}'

        balena_releases="$(mktemp)"
        balena releases '${{ inputs.FLEET }}' | tail -n +2 | head -n ${{ inputs.RELEASES }} > "${balena_releases}"

        # convert to JSON to find the correct draft release id and commit
        release_id="$(while IFS=' ' read -r id commit created_at status semver is_final
        do
          printf '{"id":%s,"commit":"%s","created_at":"%s","status":"%s","semver":"%s","is_final":%s}\n' \
            "${id}" "${commit}" "${created_at}" "${status}" "${semver}" "${is_final}"
        done < "${balena_releases}" | jq -s | jq -r '.[] | select((.id==${{ steps.push-release.outputs.release_id }}) and (.is_final==false) and (.status=="success")).id')"

        commit="$(while IFS=' ' read -r id commit created_at status semver is_final
        do
          printf '{"id":%s,"commit":"%s","created_at":"%s","status":"%s","semver":"%s","is_final":%s}\n' \
            "${id}" "${commit}" "${created_at}" "${status}" "${semver}" "${is_final}"
        done < "${balena_releases}" | jq -s | jq -r '.[] | select(.id==${{ steps.push-release.outputs.release_id }}).commit')"

        if ! [ '${{ steps.register-test-device.outputs.balena_device_id }}' = '' ] \
          && ! [ "${release_id}" = '' ] \
          && ! [ "${commit}" = '' ]; then

            # pin DUT to draft release
            curl -X PATCH --silent --retry ${{ inputs.RETRY }} --fail -o /dev/null \
              'https://api.${{ fromJSON(inputs.json).balena_environment }}/v6/device?$filter=id%20in%20(${{ steps.register-test-device.outputs.balena_device_id }})' \
              -H 'authorization: Bearer ${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}' \
              -H 'content-type: application/json' \
              --data-raw "{\"should_be_running__release\":${release_id}}" \
              --compressed

            # FIXME: https://github.com/balena-io/balena-cli/issues/1543
            echo balena device pin \
              '${{ steps.register-test-device.outputs.balena_device_uuid }}' \
              "${release_id}"
        fi

        balena device ${{ steps.register-test-device.outputs.balena_device_uuid }}

        app_id="$(balena fleet ${{ inputs.FLEET }} | grep ^ID: | cut -c14-)"

        echo "::set-output name=balena_app_id::${app_id}"

    # (TBC) additional overrides for testing (i.e. DB_USER, DB_PASSWORD, etc.)
    # FIXME: balenCloud environment/device profiles to reduce verbosity
    - name: configure test device environment
      id: configure-test-env
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
      shell: bash
      run: |
        set -ue

        [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

        balena login --token '${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}'

        balena env add NODE_ENV '${{ inputs.NODE_ENV }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add LOGLEVEL '${{ inputs.LOGLEVEL }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add DNS_TLD '${{ inputs.DNS_TLD }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add POSTGRES_HOST '${{ inputs.POSTGRES_HOST }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add POSTGRES_DATABASE '${{ inputs.POSTGRES_DATABASE }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add POSTGRES_USER '${{ inputs.POSTGRES_USER }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add POSTGRES_PASSWORD '${{ inputs.POSTGRES_PASSWORD }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REDIS_HOST '${{ inputs.REDIS_HOST }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add API_HOST "api.${{ steps.register-test-device.outputs.balena_device_uuid }}.${{ inputs.DNS_TLD }}" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add LIVECHAT_HOST "livechat.${{ steps.register-test-device.outputs.balena_device_uuid }}.${{ inputs.DNS_TLD }}" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add UI_HOST "jel.${{ steps.register-test-device.outputs.balena_device_uuid }}.${{ inputs.DNS_TLD }}" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add OAUTH_REDIRECT_BASE_URL "jel.${{ steps.register-test-device.outputs.balena_device_uuid }}.${{ inputs.DNS_TLD }}" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add SERVER_HOST "api.${{ steps.register-test-device.outputs.balena_device_uuid }}.${{ inputs.DNS_TLD }}" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY_HOST "registry.${{ steps.register-test-device.outputs.balena_device_uuid }}.${{ inputs.DNS_TLD }}" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY2_HOST "registry.${{ steps.register-test-device.outputs.balena_device_uuid }}.${{ inputs.DNS_TLD }}" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add SENTRY_DSN_UI '' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add SENTRY_DSN_SERVER '' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add AWS_ACCESS_KEY_ID '' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add AWS_SECRET_ACCESS_KEY '' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add AWS_S3_BUCKET_NAME '' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add SUT 1 \
          --service '${{ inputs.JELLYFISH_TESTS_SERVICE }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add GITHUB_REF '${{ inputs.GITHUB_REF }}' \
          --service '${{ inputs.JELLYFISH_TESTS_SERVICE }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add VERBOSE '${{ inputs.VERBOSE }}' \
          --service '${{ inputs.JELLYFISH_TESTS_SERVICE }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add LIVECHAT_PORT '${{ inputs.LIVECHAT_PORT }}' \
          --service '${{ inputs.JELLYFISH_TESTS_SERVICE }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add SERVER_PORT '${{ inputs.SERVER_PORT }}' \
          --service '${{ inputs.JELLYFISH_TESTS_SERVICE }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add UI_PORT '${{ inputs.UI_PORT }}' \
          --service '${{ inputs.JELLYFISH_TESTS_SERVICE }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add MDNS_TLD '${{ inputs.DNS_TLD }}' \
          --service mdns \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY2_TOKEN_AUTH_ISSUER "api.${{ steps.register-test-device.outputs.balena_device_uuid }}.${{ inputs.DNS_TLD }}" \
          --service registry \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY2_TOKEN_AUTH_REALM "https://api.${{ steps.register-test-device.outputs.balena_device_uuid }}.${{ inputs.DNS_TLD }}" \
          --service registry \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY2_STORAGEPATH '${{ inputs.REGISTRY2_STORAGEPATH }}' \
          --service registry \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY2_CACHE_ADDR '${{ inputs.REGISTRY2_CACHE_ADDR }}' \
          --service registry \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY2_S3_CLOUDFRONT_ENDPOINT '' \
          --service registry \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY2_S3_CLOUDFRONT_KEYPAIR_ID '' \
          --service registry \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY2_S3_CLOUDFRONT_PRIVATEKEY '' \
          --service registry \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY2_S3_KEY '' \
          --service registry \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY2_S3_SECRET '' \
          --service registry \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add INTEGRATION_DEFAULT_USER 'admin' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add INTEGRATION_BALENA_API_PRIVATE_KEY '' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION '' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY_TOKEN_AUTH_CERT_PUB '' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY_TOKEN_AUTH_CERT_ISSUER '' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY_TOKEN_AUTH_CERT_KEY '' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add REGISTRY_TOKEN_AUTH_CERT_KID '' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

    # FIXME: balenCloud environment/device profiles to reduce verbosity
    - name: configure test device secrets
      id: configure-test-secrets
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
      shell: bash
      run: |
        set -ue

        balena login --token '${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}'

        if [[ $(echo $-) =~ x ]]; then
            echo "::error::Secrets will be leaked, aborting."
            exit 1
        fi

        balena env add API_TOKEN '${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH_TEST }}' \
          --service cert-manager \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add AWS_ACCESS_KEY_ID "$(cat < ${{ inputs.GIT_SECRETS }}/aws_access_key_id)" \
          --service '${{ inputs.JELLYFISH_TESTS_SERVICE }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add AWS_SECRET_ACCESS_KEY "$(cat < ${{ inputs.GIT_SECRETS }}/aws_secret_access_key)" \
          --service '${{ inputs.JELLYFISH_TESTS_SERVICE }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add AWS_S3_BUCKET_NAME "$(cat < ${{ inputs.GIT_SECRETS }}/aws_s3_bucket_name)" \
          --service '${{ inputs.JELLYFISH_TESTS_SERVICE }}' \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add INTEGRATION_DISCOURSE_TOKEN "$(cat < ${{ inputs.GIT_SECRETS }}/integration_discourse_token)" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add INTEGRATION_DISCOURSE_USERNAME "$(cat < ${{ inputs.GIT_SECRETS }}/integration_discourse_username)" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add INTEGRATION_FRONT_TOKEN "$(cat < ${{ inputs.GIT_SECRETS }}/integration_front_token)" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add INTEGRATION_GITHUB_APP_ID "$(cat < ${{ inputs.GIT_SECRETS }}/integration_github_app_id)" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add INTEGRATION_GITHUB_PRIVATE_KEY "$(cat < ${{ inputs.GIT_SECRETS }}/integration_github_private_key)" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add INTEGRATION_GITHUB_TOKEN "$(cat < ${{ inputs.GIT_SECRETS }}/integration_github_token)" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

        balena env add INTEGRATION_INTERCOM_TOKEN "$(cat < ${{ inputs.GIT_SECRETS }}/integration_intercom_token)" \
          --device '${{ steps.register-test-device.outputs.balena_device_uuid }}'

    - name: provision ephemeral test device
      id: provision-test-device
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
      shell: bash
      run: |
        set -ue

        [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

        for subnet_id in ${{ inputs.AWS_VPC_SUBNET_IDS }}; do
            for market_type in spot on-demand; do
                # https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html
                response="$(aws ec2 run-instances \
                  --launch-template 'LaunchTemplateId=${{ inputs.AWS_EC2_LAUNCH_TEMPLATE }},Version=${{ inputs.AWS_EC2_LT_VERSION }}' \
                  --instance-type '${{ inputs.AWS_EC2_INSTANCE_TYPE }}' \
                  $([[ $market_type =~ spot ]] && echo '--instance-market-options MarketType=spot') \
                  --security-group-ids '${{ inputs.AWS_VPC_SECURITY_GROUP_IDS }}' \
                  --subnet-id "${subnet_id}" \
                  --associate-public-ip-address \
                  --user-data file://config.json \
                  --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${{ inputs.JELLYFISH_TESTS_SERVICE }}},{Key=MarketType,Value=${market_type}},{Key=Owner,Value=${{ inputs.AWS_IAM_USERNAME }}},{Key=GITHUB_SHA,Value=${GITHUB_SHA}-tests}]" || true)"

                [[ -n $response ]] && break
            done
        done

        [[ -z $response ]] && exit 1

        instance_id="$(echo "${response}" | jq -r '.Instances[].InstanceId')"

        aws ec2 wait instance-running --instance-ids "${instance_id}"

        aws ec2 wait instance-status-ok --instance-ids "${instance_id}"

        echo "::set-output name=instance_id::${instance_id}"

      env:
        AWS_ACCESS_KEY_ID: ${{ fromJSON(inputs.secrets).AWS_ACCESS_KEY_ID }}
        AWS_DEFAULT_REGION: ${{ inputs.AWS_REGION }}
        AWS_SECRET_ACCESS_KEY: ${{ fromJSON(inputs.secrets).AWS_SECRET_ACCESS_KEY }}

    - name: provision SSH key
      id: provision-ssh-key
      # wait for cloud-config
      # https://github.com/balena-os/cloud-config
      #timeout-minutes: 10
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
      shell: bash
      run: |
        set -ue

        [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

        balena login --token '${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}'

        if ! [[ -e "${HOME}/.ssh/id_rsa" ]]; then
            ssh-keygen -N '' \
              -C "$(balena whoami | grep EMAIL | cut -c11-)" \
              -f "${HOME}/.ssh/id_rsa"
        fi

        match=''
        for key in $(balena keys | grep -v ID | awk '{print $1}'); do
            fp=$(balena key ${key} | tail -n 1 | ssh-keygen -E md5 -lf /dev/stdin | awk '{print $2}')
            if [[ $fp =~ $(ssh-keygen -E md5 -lf "${HOME}/.ssh/id_rsa" | awk '{print $2}') ]]; then
                match="${key}"
                break
            fi
        done

        if [[ -z $match ]]; then
            balena key add "${GITHUB_SHA}" "${HOME}/.ssh/id_rsa.pub"
        else
            balena keys
        fi

        pgrep ssh-agent || ssh-agent -a "${SSH_AUTH_SOCK}"

        ssh-add "${HOME}/.ssh/id_rsa"

        while ! [[ "$(ssh-uuid -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          ${{ steps.register-test-device.outputs.balena_device_uuid }}.balena \
          cat /mnt/boot/config.json | jq -r .uuid)" =~ ${{ steps.register-test-device.outputs.balena_device_uuid }} ]]; do

            echo "::warning::Still working..."
            sleep "$(( (RANDOM % 5) + 5 ))s"
        done

        echo "::set-output name=key_id::${GITHUB_SHA}"

      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    # FIXME: consider Docker health checks aware supervisor endpoint to reduce verbosity
    - name: wait for application
      id: wait-application
      #timeout-minutes: 30
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
      shell: bash
      run: |
        set -ue

        [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

        source functions

        balena login --token '${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}'

        balena whoami && ssh-add -l

        while [[ "$(curl -X POST --silent --retry ${{ inputs.RETRY }} --fail \
          'https://api.${{ fromJSON(inputs.json).balena_environment }}/supervisor/v1/device' \
          --header 'authorization: Bearer ${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}' \
          --header 'Content-Type:application/json' \
          --data '{"uuid": "${{ steps.register-test-device.outputs.balena_device_uuid }}", "method": "GET"}' \
          --compressed | jq -r '.update_pending')" =~ ^true$ ]]; do

            sleep "$(( ( RANDOM % ${{ inputs.RETRY }} ) + ${{ inputs.RETRY }} ))s"
        done

        # wait for services to start running
        while with_backoff ssh-uuid -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          ${{ steps.register-test-device.outputs.balena_device_uuid }}.balena \
          'balena ps -q | xargs balena inspect | jq -r .[].State.Status' \
          | grep -E 'created|restarting|removing|paused|exited|dead'; do

            echo "::warning::Still working..."
            sleep "$(( (RANDOM % 30) + 30 ))s"
        done

        # wait for Docker healthchecks
        while with_backoff ssh-uuid -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          ${{ steps.register-test-device.outputs.balena_device_uuid }}.balena \
          'balena ps -q | xargs balena inspect \
          | jq -r ".[] | select(.State.Health.Status!=null).Name + \":\" + .State.Health.Status"' \
          | grep -E ':starting|:unhealthy'; do

            echo "::warning::Still working..."
            sleep "$(( (RANDOM % 30) + 30 ))s"
        done

      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    # (TBC) https://www.balena.io/docs/reference/supervisor/docker-compose/
    # due to lack of long form depends_on support in compositions, restart to ensure all
    # components are running with the latest configuration; preferred over restart via
    # Supervisor API restart due to potential HTTP [timeouts](https://github.com/balena-os/balena-supervisor/issues/1157)
    - name: restart components
      id: restart-application
      #timeout-minutes: 15
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
      shell: bash
      run: |
        set -ue

        [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

        source functions

        balena login --token '${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}'

        balena whoami && ssh-add -l

        with_backoff ssh-uuid -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          ${{ steps.register-test-device.outputs.balena_device_uuid }}.balena \
          'balena ps -q | xargs balena restart || true'

        #balena device restart ${{ steps.register-test-device.outputs.balena_device_uuid }}

        # wait for Docker healthchecks
        while with_backoff ssh-uuid -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          ${{ steps.register-test-device.outputs.balena_device_uuid }}.balena \
          'balena ps -q | xargs balena inspect \
          | jq -r ".[] | select(.State.Health.Status!=null).Name + \":\" + .State.Health.Status"' \
          | grep -vE 'resin_supervisor|balena_supervisor' \
          | grep -E ':starting|:unhealthy'; do

            echo "::warning::Still working..."
            sleep "$(( (RANDOM % 30) + 30 ))s"
        done

      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    # FIXME: https://github.com/balena-io/balena-cli/issues/1482
    - name: test release
      id: test-release
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
      shell: bash
      run: |
        set -ue

        [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

        source functions

        balena login --token '${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}'

        balena whoami && ssh-add -l

        while ! [[ $(curl -X POST --silent --retry ${{ inputs.RETRY }} --fail \
          'https://api.${{ fromJSON(inputs.json).balena_environment }}/supervisor/v2/applications/state' \
          --header 'authorization: Bearer ${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}' \
          --header 'Content-Type:application/json' \
          --data '{"uuid": "${{ steps.register-test-device.outputs.balena_device_uuid }}", "method": "GET"}' \
          --compressed | jq -r '.[].services."${{ inputs.JELLYFISH_TESTS_SERVICE }}".status') =~ Run|run ]]; do

            echo "::warning:: Waiting for the test service to be started"
            sleep "$(( ( RANDOM % ${{ inputs.RETRY }} ) + ${{ inputs.RETRY }} ))s"
        done

        # (TBC) https://www.flowdock.com/app/rulemotion/i-cli/threads/fkUfPzT-Tez4Ev3oSy07GRhfzao
        with_backoff ssh-uuid -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t \
          --service ${{ inputs.JELLYFISH_TESTS_SERVICE }} \
          ${{ steps.register-test-device.outputs.balena_device_uuid }}.balena \
          'scripts/ci/run-tests.sh ${{ inputs.JELLYFISH_TESTS }}'

      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        ATTEMPTS: 2

    - name: remove SSH key
      if: always()
      id: remove-ssh-key
      shell: bash
      run: |
        set -ue

        [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

        balena login --token '${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}'

        balena keys | grep ${{ steps.provision-ssh-key.outputs.key_id }} \
          | awk '{print $1}' | xargs balena key rm --yes || true

        pgrep ssh-agent && (pgrep ssh-agent | xargs kill)

        rm -f /tmp/ssh_agent.sock

    - name: destroy ephemeral test device
      if: always()
      id: destroy-test-device
      shell: bash
      run: |
        set -ue

        [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

        balena login --token '${{ fromJSON(inputs.secrets).BALENA_API_KEY_PUSH }}'

        aws ec2 terminate-instances \
          --instance-ids ${{ steps.provision-test-device.outputs.instance_id }} || true

        balena device rm ${{ steps.register-test-device.outputs.balena_device_uuid }} --yes || true

      env:
        AWS_ACCESS_KEY_ID: ${{ fromJSON(inputs.secrets).AWS_ACCESS_KEY_ID }}
        AWS_DEFAULT_REGION: ${{ inputs.AWS_REGION }}
        AWS_SECRET_ACCESS_KEY: ${{ fromJSON(inputs.secrets).AWS_SECRET_ACCESS_KEY }}
