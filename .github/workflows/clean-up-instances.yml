name: deploy Jellyfish to balenaCloud

on: workflow_dispatch

env:
  # https://github.com/product-os/environment-production/pull/277
  # Patch for issue with AWS - see https://jel.ly.fish/thread-fda9f620-49d0-4d20-9093-1b3dc08f9bf8
  # was c6a.2xlarge
  # AWS_EC2_INSTANCE_TYPE: c6a.2xlarge
  AWS_EC2_INSTANCE_TYPE: m6a.2xlarge
  AWS_EC2_LAUNCH_TEMPLATE: lt-0716bda3583150eaa
  AWS_EC2_LT_VERSION: 6
  AWS_IAM_USERNAME: jellyfish-tests-iam-User-Q6SZ9PAHLZAE
  AWS_REGION: us-east-1
  AWS_VPC_SECURITY_GROUP_IDS: sg-09f3c836cfe28939c
  AWS_VPC_SUBNET_ID: subnet-0235593b90b9d5262
  BALENA_CLI_URL: https://github.com/balena-io/balena-cli/releases/download
  BALENA_CLI_VERSION: 13.1.11
  # https://github.com/balena-io/balena-cli/issues/2447
  DEBUG: 0
  DEVICE_TYPE: genericx86-64-ext
  DNS_TLD: ly.fish.local
  ENVIRONMENT: balena-cloud.com
  FLEET: product_os/jellyfish
  GIT_SECRETS: .balena/secrets
  JELLYFISH_TESTS_SERVICE: jellyfish-tests
  JELLYFISH_TESTS: |
    wait-for-api \
    integration-server \
    e2e e2e-ui \
    export-database \
    import-database \
    e2e-server-previous-dump

  LIVECHAT_PORT: 443
  LOGLEVEL: warning
  NODE_ENV: test
  POSTGRES_DATABASE: jellyfish
  POSTGRES_HOST: postgres
  POSTGRES_PASSWORD: docker
  POSTGRES_USER: docker
  REDIS_HOST: redis
  REGISTRY_HOST: registry.ly.fish.local
  REGISTRY_TOKEN_AUTH_CERT_ISSUER: api.ly.fish.local
  REGISTRY_TOKEN_AUTH_CERT_KEY: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU4xWUw1WVRjb3NVVnhHdXlXMGt4cGE0ekxzbEpGQ2JvZUxIUWlpaW1vTkhvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFR0RRQ2FpK1FnNG9GZE9HMXZNdWdtMFA5bTViSUR3R29MNjg1aGVYR0hwZWJVblgxOGQvYwpQUTZGbDBQaklQam9iUzlCNW5oSTF1Y0p3MW8vclE2UXdnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  REGISTRY_TOKEN_AUTH_CERT_KID: UkNVNTo2Q1RaOkJITjc6RlBCUjpKWUJIOjVHRVI6QVdQSDpIRk9aOjZaT0c6VVUzTzo3Q0gzOjZFU0sK
  REGISTRY_TOKEN_AUTH_CERT_PUB: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJKekNCemdJSkFPRkhIb0ZGSVFDbk1Bb0dDQ3FHU000OUJBTUNNQnd4R2pBWUJnTlZCQU1NRVdGd2FTNXMKZVM1bWFYTm9MbXh2WTJGc01CNFhEVEl5TURZeE56QXhNalV6TjFvWERUSXpNRFl4TnpBeE1qVXpOMW93SERFYQpNQmdHQTFVRUF3d1JZWEJwTG14NUxtWnBjMmd1Ykc5allXd3dXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CCkJ3TkNBQVFZTkFKcUw1Q0RpZ1YwNGJXOHk2Q2JRLzJibHNnUEFhZ3Zyem1GNWNZZWw1dFNkZlh4Mzl3OURvV1gKUStNZytPaHRMMEhtZUVqVzV3bkRXait0RHBEQ01Bb0dDQ3FHU000OUJBTUNBMGdBTUVVQ0lRRGJXaGtSUkN6QgpsdW5kUTVGRXFZK3AvYUU1dDlzdFpVV1lQVnpQYTBuSGhnSWdBcXRKZUI2UjZOSzVDYTRibGRvUi9TemZtS3FECmVqL1lTWlNUN2p5MnNCRT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  REGISTRY_TOKEN_AUTH_JWT_ALGO: ES256
  REGISTRY2_CACHE_ADDR: redis:6379
  REGISTRY2_STORAGEPATH: /data
  RELEASES: 50
  RETRY: 3
  SERVER_PORT: 443
  SOCAT_VERSION: 1.7.4.2
  UI_PORT: 443
  VARIANT: prod
  VERBOSE: "true"

jobs:
  remove-instances:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      # https://github.com/pdcastro/ssh-uuid#why
      # https://github.com/pdcastro/ssh-uuid#linux-debian-ubuntu-others
      - name: install additional dependencies
        id: extra-dependencies
        run: |
          set -ue

          [[ '${{ env.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

          pushd "${RUNNER_TEMP}"

          sudo apt install -y \
            build-essential \
            git-secret \
            libreadline-dev \
            libssl-dev \
            libwrap0-dev \
            ssh

          release_zip="balena-cli-v${BALENA_CLI_VERSION}-linux-x64-standalone.zip"

          wget -q "${BALENA_CLI_URL}/v${BALENA_CLI_VERSION}/${release_zip}" \
            && unzip -q "${release_zip}" -d "${RUNNER_TEMP}"
          "${RUNNER_TEMP}/balena-cli/balena" version

          echo "${RUNNER_TEMP}/balena-cli" >> $GITHUB_PATH

          mkdir -p "${RUNNER_TEMP}/ssh-uuid"

          wget -q -O "${RUNNER_TEMP}/ssh-uuid/ssh-uuid" https://raw.githubusercontent.com/pdcastro/ssh-uuid/master/ssh-uuid.sh \
            && chmod +x "${RUNNER_TEMP}/ssh-uuid/ssh-uuid" \
            && ln -s "${RUNNER_TEMP}/ssh-uuid/ssh-uuid" "${RUNNER_TEMP}/ssh-uuid/scp-uuid"

          "${RUNNER_TEMP}/ssh-uuid/scp-uuid" --help

          echo "${RUNNER_TEMP}/ssh-uuid" >> $GITHUB_PATH

          curl --silent --retry ${{ env.RETRY }} --fail \
            http://www.dest-unreach.org/socat/download/socat-${SOCAT_VERSION}.tar.gz | tar -xzvf - \
            && cd socat-${SOCAT_VERSION} \
            && ./configure \
            && make \
            && sudo make install

          socat -V

          popd

      - name: import GPG key
        id: import-gpg-key
        if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: imported GPG key
        id: imported-gpg-key
        if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
        run: |
          echo 'fingerprint: ${{ steps.import-gpg-key.outputs.fingerprint }}'
          echo 'keyid:       ${{ steps.import-gpg-key.outputs.keyid }}'
          echo 'name:        ${{ steps.import-gpg-key.outputs.name }}'
          echo 'email:       ${{ steps.import-gpg-key.outputs.email }}'

      - name: reveal secrets
        id: reveal-secrets
        if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed'}}
        run: |
          set -ue

          [[ '${{ env.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

          git secret reveal -fp '${{ secrets.GPG_PASSPHRASE }}'


      - name: destroy dangling test devices
        if: always()
        id: destroy-dangling-test-devices
        run: |
          set -ue

          [[ '${{ env.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

          balena login --token '${{ secrets.BALENA_API_KEY_TEST }}'

          aws ec2 terminate-instances \
            --instance-ids  \
              i-0413136842c5cae00 \
              i-044f5a1e69dc5a451 \
              i-01e541e290c0343bf \
              i-04a2d91d6016c4aeb \
              i-0d9ea14866a481338 \
              i-08240184bbcf072a1 \
              i-0096220790edcccfd \
              i-0310bbf45c92ef0b8 \
              i-0b972a0b07cdafd02
            || true

        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}


      - name: remove SSH key
        if: always()
        id: remove-ssh-key
        run: |
          set -ue

          [[ '${{ env.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

          balena login --token '${{ secrets.BALENA_API_KEY_TEST }}'

          balena keys | grep ${{ steps.provision-ssh-key.outputs.key_id }} \
            | awk '{print $1}' | xargs balena key rm --yes || true

          pgrep ssh-agent && (pgrep ssh-agent | xargs kill)

          rm -f /tmp/ssh_agent.sock

      - name: destroy ephemeral test device
        # Execute even if tests fail
        if: always()
        id: destroy-test-device
        run: |
          set -ue

          [[ '${{ env.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

          balena login --token '${{ secrets.BALENA_API_KEY_TEST }}'

          aws ec2 terminate-instances \
            --instance-ids ${{ steps.provision-test-device.outputs.instance_id }} || true

          balena device rm ${{ steps.register-test-device.outputs.balena_device_uuid }} --yes || true

        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
