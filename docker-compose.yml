version: '2.1'

services:
  api:
    build:
      context: .
      dockerfile: ./apps/server/Dockerfile
      args:
        - NPM_TOKEN
    networks:
      - internal
    depends_on:
      - postgres
      - redis
      - tick
      - worker_1
      - worker_2
      - balena-mdns-publisher
    environment:
      - DATABASE=postgres
      - LOGENTRIES_TOKEN
      - LOGLEVEL=crit
      - NODE_ENV
      - POD_NAME=localhost
      - PORT=80
      - POSTGRES_DATABASE=jellyfish
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT=5432
      - POSTGRES_USER=docker
      - REDIS_HOST=redis
      - REDIS_PASSWORD=
      - REDIS_PORT=6379
      - SENTRY_DSN_SERVER
      - SERVER_DATABASE=jellyfish
      - SERVER_PORT=80
      - TEST_USER_ORGANIZATION=balena
      - TEST_USER_PASSWORD=jellyfish
      - TEST_USER_ROLE=user-test
      - TEST_USER_USERNAME=jellyfish
      - FS_DRIVER
      - AWS_ACCESS_KEY_ID
      - AWS_S3_BUCKET_NAME
      - AWS_SECRET_ACCESS_KEY
      - INTEGRATION_BALENA_API_APP_SECRET=foobar
      - INTEGRATION_BALENA_API_OAUTH_BASE_URL=https://api.balena-cloud.com
      - INTEGRATION_BALENA_API_PRIVATE_KEY
      - INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION
      - INTEGRATION_BALENA_API_PUBLIC_KEY_STAGING=foobar
      - INTEGRATION_DEFAULT_USER
      - INTEGRATION_DISCOURSE_SIGNATURE_KEY
      - INTEGRATION_DISCOURSE_TOKEN
      - INTEGRATION_DISCOURSE_USERNAME
      - INTEGRATION_FLOWDOCK_SIGNATURE_KEY
      - INTEGRATION_FLOWDOCK_TOKEN
      - INTEGRATION_FRONT_TOKEN
      - INTEGRATION_GITHUB_APP_ID
      - INTEGRATION_GITHUB_PRIVATE_KEY
      - INTEGRATION_GITHUB_SIGNATURE_KEY
      - INTEGRATION_GITHUB_TOKEN
      - INTEGRATION_GOOGLE_MEET_CREDENTIALS
      - INTEGRATION_INTERCOM_TOKEN
      - INTEGRATION_OUTREACH_APP_ID
      - INTEGRATION_OUTREACH_APP_SECRET
      - INTEGRATION_OUTREACH_SIGNATURE_KEY
      - INTEGRATION_TYPEFORM_SIGNATURE_KEY
      - MAILGUN_DOMAIN
      - MAILGUN_BASE_URL
      - MAILGUN_TOKEN
      - MONITOR_SECRET_TOKEN
      - NPM_TOKEN
      - RESET_PASSWORD_SECRET_TOKEN
      - CI
      - REGISTRY_TOKEN_AUTH_CERT_ISSUER=api.ly.fish.local
      - REGISTRY_TOKEN_AUTH_CERT_KEY="LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU4xWUw1WVRjb3NVVnhHdXlXMGt4cGE0ekxzbEpGQ2JvZUxIUWlpaW1vTkhvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFR0RRQ2FpK1FnNG9GZE9HMXZNdWdtMFA5bTViSUR3R29MNjg1aGVYR0hwZWJVblgxOGQvYwpQUTZGbDBQaklQam9iUzlCNW5oSTF1Y0p3MW8vclE2UXdnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo="
      - REGISTRY_TOKEN_AUTH_CERT_KID="UkNVNTo2Q1RaOkJITjc6RlBCUjpKWUJIOjVHRVI6QVdQSDpIRk9aOjZaT0c6VVUzTzo3Q0gzOjZFU0sK"
      - REGISTRY_TOKEN_AUTH_JWT_ALGO=ES256
      - REGISTRY_HOST=registry.ly.fish.local
    healthcheck:
      interval: 30s
      retries: 5
      test:
        - CMD
        - curl
        - --fail
        - http://localhost:80/health
      timeout: 10s
    expose:
      - 80
    restart: always
  livechat:
    build:
      args:
        - SENTRY_DSN_UI='0'
        - SERVER_HOST=https://api.ly.fish.local
        - SERVER_PORT=443
        - NPM_TOKEN
      context: .
      dockerfile: ./apps/livechat/Dockerfile
    depends_on:
      - api
      - balena-mdns-publisher
    networks:
      - internal
    environment:
      - NGINX_PORT=80
      - LIVECHAT_PORT=80
  postgres:
    image: balena/open-balena-db:4.1.0
    restart: always
    networks:
      - internal
  redis:
    image: balena/balena-redis:0.0.3
    command: [sh, -c, "redis-server /usr/local/etc/redis/redis.conf --save ''"]
    restart: always
    networks:
      - internal
  tick:
    build:
      context: .
      dockerfile: ./apps/action-server/Dockerfile.tick
      args:
        - NPM_TOKEN
    depends_on:
      - postgres
      - redis
      - balena-mdns-publisher
    environment:
      - DATABASE=postgres
      - LOGENTRIES_TOKEN
      - NODE_ENV
      - POSTGRES_DATABASE=jellyfish
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT=5432
      - POSTGRES_USER=docker
      - REDIS_HOST=redis
      - REDIS_PASSWORD=
      - REDIS_PORT=6379
      - LOGLEVEL=crit
      - SENTRY_DSN_SERVER
      - CI
    restart: always
    networks:
      - internal
  ui:
    build:
      args:
        - SENTRY_DSN_UI='0'
        - SERVER_HOST=https://api.ly.fish.local
        - SERVER_PORT=443
        - NPM_TOKEN
      context: .
      dockerfile: ./apps/ui/Dockerfile
    depends_on:
      - api
      - balena-mdns-publisher
    environment:
      - NGINX_PORT=80
      - UI_PORT=80
      - NODE_ENV
    networks:
      - internal
  worker_1:
    build:
      context: .
      dockerfile: ./apps/action-server/Dockerfile.worker
      args:
        - NPM_TOKEN
    depends_on:
      - postgres
      - redis
      - balena-mdns-publisher
    environment:
      - DATABASE=postgres
      - LOGLEVEL=crit
      - NODE_ENV
      - POSTGRES_DATABASE=jellyfish
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT=5432
      - POSTGRES_USER=docker
      - REDIS_HOST=redis
      - REDIS_PASSWORD=
      - REDIS_PORT=6379
      - SENTRY_DSN_SERVER
      - LOGENTRIES_TOKEN
      - FS_DRIVER
      - AWS_ACCESS_KEY_ID
      - AWS_S3_BUCKET_NAME
      - AWS_SECRET_ACCESS_KEY
      - INTEGRATION_BALENA_API_APP_SECRET=foobar
      - INTEGRATION_BALENA_API_OAUTH_BASE_URL=https://api.balena-cloud.com
      - INTEGRATION_BALENA_API_PRIVATE_KEY
      - INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION
      - INTEGRATION_BALENA_API_PUBLIC_KEY_STAGING=foobar
      - INTEGRATION_DEFAULT_USER
      - INTEGRATION_DISCOURSE_SIGNATURE_KEY
      - INTEGRATION_DISCOURSE_TOKEN
      - INTEGRATION_DISCOURSE_USERNAME
      - INTEGRATION_FLOWDOCK_SIGNATURE_KEY
      - INTEGRATION_FLOWDOCK_TOKEN
      - INTEGRATION_FRONT_TOKEN
      - INTEGRATION_GITHUB_APP_ID
      - INTEGRATION_GITHUB_PRIVATE_KEY
      - INTEGRATION_GITHUB_SIGNATURE_KEY
      - INTEGRATION_GITHUB_TOKEN
      - INTEGRATION_GOOGLE_MEET_CREDENTIALS
      - INTEGRATION_INTERCOM_TOKEN
      - INTEGRATION_OUTREACH_APP_ID
      - INTEGRATION_OUTREACH_APP_SECRET
      - INTEGRATION_OUTREACH_SIGNATURE_KEY
      - INTEGRATION_TYPEFORM_SIGNATURE_KEY
      - MAILGUN_DOMAIN
      - MAILGUN_BASE_URL
      - MAILGUN_TOKEN
      - MONITOR_SECRET_TOKEN
      - NPM_TOKEN
      - RESET_PASSWORD_SECRET_TOKEN
      - CI
    restart: always
    networks:
      - internal
  worker_2:
    build:
      context: .
      dockerfile: ./apps/action-server/Dockerfile.worker
      args:
        - NPM_TOKEN
    depends_on:
      - postgres
      - redis
      - balena-mdns-publisher
    environment:
      - DATABASE=postgres
      - LOGLEVEL=crit
      - NODE_ENV
      - POSTGRES_DATABASE=jellyfish
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT=5432
      - POSTGRES_USER=docker
      - REDIS_HOST=redis
      - REDIS_PASSWORD=
      - REDIS_PORT=6379
      - SENTRY_DSN_SERVER
      - LOGENTRIES_TOKEN
      - FS_DRIVER
      - AWS_ACCESS_KEY_ID
      - AWS_S3_BUCKET_NAME
      - AWS_SECRET_ACCESS_KEY
      - INTEGRATION_BALENA_API_APP_SECRET=foobar
      - INTEGRATION_BALENA_API_OAUTH_BASE_URL=https://api.balena-cloud.com
      - INTEGRATION_BALENA_API_PRIVATE_KEY
      - INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION
      - INTEGRATION_BALENA_API_PUBLIC_KEY_STAGING=foobar
      - INTEGRATION_DEFAULT_USER
      - INTEGRATION_DISCOURSE_SIGNATURE_KEY
      - INTEGRATION_DISCOURSE_TOKEN
      - INTEGRATION_DISCOURSE_USERNAME
      - INTEGRATION_FLOWDOCK_SIGNATURE_KEY
      - INTEGRATION_FLOWDOCK_TOKEN
      - INTEGRATION_FRONT_TOKEN
      - INTEGRATION_GITHUB_APP_ID
      - INTEGRATION_GITHUB_PRIVATE_KEY
      - INTEGRATION_GITHUB_SIGNATURE_KEY
      - INTEGRATION_GITHUB_TOKEN
      - INTEGRATION_GOOGLE_MEET_CREDENTIALS
      - INTEGRATION_INTERCOM_TOKEN
      - INTEGRATION_OUTREACH_APP_ID
      - INTEGRATION_OUTREACH_APP_SECRET
      - INTEGRATION_OUTREACH_SIGNATURE_KEY
      - INTEGRATION_TYPEFORM_SIGNATURE_KEY
      - MAILGUN_DOMAIN
      - MAILGUN_BASE_URL
      - MAILGUN_TOKEN
      - MONITOR_SECRET_TOKEN
      - NPM_TOKEN
      - RESET_PASSWORD_SECRET_TOKEN
      - CI
    restart: always
    networks:
      - internal
  balena-mdns-publisher:
    image: 'balena/balena-mdns-publisher:master'
    network_mode: host
    cap_add:
      - SYS_RESOURCE
      - SYS_ADMIN
    security_opt:
      - 'apparmor=unconfined'
    tmpfs:
      - /run
      - /sys/fs/cgroup
    labels:
      io.balena.features.dbus: '1'
      io.balena.features.supervisor-api: '1'
    environment:
      MDNS_TLD: ly.fish.local
      MDNS_SUBDOMAINS: >-
        ["jel", "livechat", "api", "registry"]
      DBUS_SESSION_BUS_ADDRESS: 'unix:path=/host/run/dbus/system_bus_socket'
      CONFD_BACKEND: 'ENV'
      BALENA_ROOT_CA: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tXG5NSUlFMURDQ0FyeWdBd0lCQWdJVUIvOXV6OWt6QVIrVVI0ZXE5bDBEcHIrbUlNd3dEUVlKS29aSWh2Y05BUUVMXG5CUUF3R3pFWk1CY0dBMVVFQXhNUWJIa3VabWx6YUM1c2IyTmhiQ0JEUVRBZUZ3MHlNVEF4TWpVeE1ESXhNalZhXG5GdzB6TVRBeE1qVXhNREl4TWpWYU1Cc3hHVEFYQmdOVkJBTVRFR3g1TG1acGMyZ3ViRzlqWVd3Z1EwRXdnZ0lpXG5NQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUURVKzVnaEI1N2NPMEFPMHEzQmxGcDFIQmRzXG44QU9jOTYrOXhGbi9IeE5JNHJYMWR3WG1oem9PaE0wTkNJRWEwejNRQ1hiS0ZnY3hLem43WTJiN0FvMzducWgzXG5SeEdBUnQ5dWRzNGdacDFrV0ZTamhNbnBhV0s3VENGVndlMEZpVjBMWDFxTG5SVmdOT1U1a05WQ0grb0FQM2I1XG5qMzMwZ2c5VGwzTG5BdWxVeVVsRzZHaUFZc3ZJaUxhUnZheHo0eE1Oc0I4a0xSTWdCWnFnd0s4eXFXQW9xZ3ArXG5EallpUUVuMGdyM3BaYkRaaW11V3h6cVpUZXI4UHh2SUdVazQ3QlhkaXI3VWF0MzFvK2tPeUFaSTFra1dDeGN5XG5KckV4TSt2OWozeGQwODRDaENKeVBCbE15bkZIZ3RHUE9MSVBEU1M4elpBeDBPM0hHZXpqR0wxZ21PWlI3Y3FOXG5FTzByR29ONHlqV2ZaV0srK1FrYXo3b29GbHBPVk9KSzQzTllMcU4reDI0RWhRWmNib2RyQk5hNk9FOGZnZ2dWXG5wVkpEdUdEWmVVMjR0eUNiKzl1MTUvamN5ZUt6dTNuYWEyUWdoenA4eTBXbTk3REg3SW0yWHpSekYrc2tFRUkvXG4yVXR1RTdaM1BVSThHb2UzMUJMTlZaeXlnS2RJSXhCVUlwTXNDQWpvcCt1RDZRcFhjT2I4NFJucHJDZzBEcHNHXG5NV1NaWUp2RGo4cElxbGRISVM2dmNUUVVsbmV2c3JqTkJkRkRwSGZxSnZLcXpnd1c2eFJxTmp6aU9ITHZqWXdPXG55Q2c1eUhKenBKOW9zd0UxU1FzU1Z6ODF6eTcxL1ZpajgyRzI1Q1g5Q2pmemJsdC9VbFZGU013TU9iWC9jU0VmXG56M0xDTHduWWFTZUsrOGY2R1FJREFRQUJveEF3RGpBTUJnTlZIUk1FQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCXG5Dd1VBQTRJQ0FRQTk0UHduOEl1YVlib2RQRno5NXpUR2haREU1NU4zMFJiemlLTGFnSGs4ZVNHOHEybVVmeDN2XG4yTUQ2U21oSzUxSmgvUmoxK0tIbGVuMjFKSlgxWDZ2U3dFRDFQQ3dMdXBGY1k3c1JLM25HdXg5NkVUNHRTZm9JXG43cnFreWJYZ3c1MFpaQUltL0RsZW1RMWkyUWVlR0JuWUpRbFQrNEVIdEFra25XREdJaW5lQUd6cFhUUDU4N0NHXG5ZdktKU25hRTRzS2FML24wb2VjQVgxbzRYMS9kVko0dzVHL2c2R0NCbXRXZHdEMTBDTDZkZjRLOUx6M201em55XG5STmtZcjZoTHJMOVhLYmx0dXJmNFFWZXFwY05Tc2w2MmRwdkZWaTJGajh4Y013Qjd0ZGxUK2FnRWVkWTM5dUFLXG5HdXZhb3VrNXd2dlV3RTNrSFlVRFpLUndNZVFXVkwrdUE0d0Y3RUw2NnBOc2ZVaUsyVlZUeUFROFF0VnUwRGJYXG5GZFlPZkZ3ck9HWkpUZFpyc0JwazBBVDJ0MXQ5ZDdydXVqSDdDeVFHb2tWVEF6RTU5Wk5zMG9IdG8waXl1STg0XG43aU9DdlV4aENlcDh0R0c1YmI2S2l5WGV0S0c5ZUk1U2l6S1cxSTlIRVpzMzh6MEpxQ1I4Y1AraFJ5WDFZb3loXG5VSWl0WWFBS1N5TWN0SENxeFJDODZ1MDNXTWpiTE8xMXdiNGltQXFheUY5RjFEUFVDdTAyVWs4Qnp6L0lrVjVDXG42bHg3eEZPODBaeWo3ak9LRE05WFY5dytqSms5SngrT0w2dGl4OVVRWTBRczdVNzVkbFhGNjIxUjE1T2xVVVlkXG44eVhTSWt5cEo2bmtVandtU2ZMM0N6eWRkN3U4L0d1TDlFa3c5WVhuRmloTlZaTWpXbXdRT3c9PVxuLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  haproxy:
    image: 'balena/open-balena-haproxy:3.1.5'
    cap_add:
      - SYS_RESOURCE
      - SYS_ADMIN
    security_opt:
      - 'apparmor=unconfined'
    tmpfs:
      - /run
      - /sys/fs/cgroup
    depends_on:
      - worker_1
      - worker_2
      - ui
      - tick
      - livechat
      - api
      - balena-mdns-publisher
    ports:
      - '80:80'
      - '443:443'
      - '5432:5432'
      - '6379:6379'
    networks:
      internal:
        aliases:
          - jel.ly.fish.local
          - livechat.ly.fish.local
          - api.ly.fish.local
          - postgres.ly.fish.local
          - redis.ly.fish.local
    environment:
      DOMAIN_INC_UUID: 'false'
      AUTOGENERATE_CERTS: 'false'
      AUTH_TOKEN: <token>
      STATIC_DNS_IP: <ip>
      CONFD_BACKEND: 'ENV'
      PROXY_CONFIG: 

networks:
  internal: {}

