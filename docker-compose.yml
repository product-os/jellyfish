version: "3"
services:
  postgres:
    image: balena/open-balena-db:3.0.1
    restart: always
    deploy:
      mode: global
      replicas: 1
    ports:
      - "${POSTGRES_PORT}:5432"
  redis:
    image: balena/balena-redis:0.0.3
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    ports:
      - "${REDIS_PORT}:6379"
  api:
    build:
      context: .
      dockerfile: apps/server/Dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      - PORT
      - DATABASE
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT
      - POSTGRES_USER=docker
      - POSTGRES_PASSWORD=docker
      - REDIS_HOST=redis
      - REDIS_PORT
      - REDIS_PASSWORD=redis
      - NODE_ENV
      - LOGLEVEL
      - SENTRY_DSN_SERVER
      - LOGENTRIES_TOKEN
      - INTEGRATION_BALENA_API_PRIVATE_KEY
      - INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION
      - INTEGRATION_BALENA_API_PUBLIC_KEY_STAGING
      - INTEGRATION_DEFAULT_USER
      - INTEGRATION_INTERCOM_TOKEN
      - INTEGRATION_FRONT_TOKEN
      - INTEGRATION_GITHUB_TOKEN
      - INTEGRATION_GITHUB_SIGNATURE_KEY
      - INTEGRATION_FLOWDOCK_SIGNATURE_KEY
      - INTEGRATION_DISCOURSE_TOKEN
      - INTEGRATION_DISCOURSE_USERNAME
      - INTEGRATION_DISCOURSE_SIGNATURE_KEY
      - INTEGRATION_OUTREACH_APP_ID
      - INTEGRATION_OUTREACH_APP_SECRET
      - INTEGRATION_OUTREACH_SIGNATURE_KEY
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      - postgres
      - redis
      - worker
      - tick
    links:
      - postgres
      - redis
  worker:
    build:
      context: .
      dockerfile: apps/action-server/Dockerfile.worker
    restart: always
    deploy:
      mode: replicated
      replicas: 5
    environment:
      - DATABASE
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT
      - POSTGRES_USER=docker
      - POSTGRES_PASSWORD=docker
      - REDIS_HOST=redis
      - REDIS_PORT
      - REDIS_PASSWORD=redis
      - NODE_ENV
      - LOGLEVEL
      - SENTRY_DSN_SERVER
      - LOGENTRIES_TOKEN
      - INTEGRATION_BALENA_API_PRIVATE_KEY
      - INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION
      - INTEGRATION_BALENA_API_PUBLIC_KEY_STAGING
      - INTEGRATION_DEFAULT_USER
      - INTEGRATION_INTERCOM_TOKEN
      - INTEGRATION_FRONT_TOKEN
      - INTEGRATION_GITHUB_TOKEN
      - INTEGRATION_GITHUB_SIGNATURE_KEY
      - INTEGRATION_FLOWDOCK_SIGNATURE_KEY
      - INTEGRATION_DISCOURSE_TOKEN
      - INTEGRATION_DISCOURSE_USERNAME
      - INTEGRATION_DISCOURSE_SIGNATURE_KEY
      - INTEGRATION_OUTREACH_APP_ID
      - INTEGRATION_OUTREACH_APP_SECRET
      - INTEGRATION_OUTREACH_SIGNATURE_KEY
    depends_on:
      - postgres
      - redis
    links:
      - postgres
      - redis
  tick:
    build:
      context: .
      dockerfile: apps/action-server/Dockerfile.tick
    restart: always
    deploy:
      mode: global
    environment:
      - DATABASE
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT
      - POSTGRES_USER=docker
      - POSTGRES_PASSWORD=docker
      - REDIS_HOST=redis
      - REDIS_PORT
      - REDIS_PASSWORD=redis
      - NODE_ENV
      - LOGLEVEL
      - SENTRY_DSN_SERVER
      - LOGENTRIES_TOKEN
      - INTEGRATION_BALENA_API_PRIVATE_KEY
      - INTEGRATION_BALENA_API_PUBLIC_KEY_PRODUCTION
      - INTEGRATION_BALENA_API_PUBLIC_KEY_STAGING
      - INTEGRATION_DEFAULT_USER
      - INTEGRATION_INTERCOM_TOKEN
      - INTEGRATION_FRONT_TOKEN
      - INTEGRATION_GITHUB_TOKEN
      - INTEGRATION_GITHUB_SIGNATURE_KEY
      - INTEGRATION_FLOWDOCK_SIGNATURE_KEY
      - INTEGRATION_DISCOURSE_TOKEN
      - INTEGRATION_DISCOURSE_USERNAME
      - INTEGRATION_DISCOURSE_SIGNATURE_KEY
      - INTEGRATION_OUTREACH_APP_ID
      - INTEGRATION_OUTREACH_APP_SECRET
      - INTEGRATION_OUTREACH_SIGNATURE_KEY
    depends_on:
      - postgres
      - redis
    links:
      - postgres
      - redis
  ui:
    build:
      context: .
      dockerfile: apps/ui/Dockerfile
      args:
        - SERVER_HOST=http://localhost
        - SERVER_PORT=${PORT}
        - SENTRY_DSN_UI=0
    environment:
      - NGINX_PORT=80
      - NODE_ENV
    links:
      - api
    depends_on:
      - api
    ports:
     - "${UI_PORT}:80"
  sidecar:
    build:
      context: .
      dockerfile: apps/sidecar/Dockerfile
    restart: always
    deploy:
      mode: global
    environment:
      - DATABASE
      - NODE_ENV
      - SERVER_HOST=http://api
      - SERVER_PORT
    depends_on:
      - api
      - ui
    links:
      - api
      - ui
